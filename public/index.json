[{"categories":null,"contents":"Hệ thống quản lý đặt lịch khám bệnh thông minh sử dụng ASP.NET Core, tích hợp chatbot AI tư vấn, phân quyền Identity và quản lý lịch hẹn – đơn thuốc – xét nghiệm.","date":"2025-10-20T00:00:00Z","permalink":"http://localhost:1313/portfolio/dacs_medbooking/","tags":null,"title":"Đồ án cơ sở - Quản lý lịch đặt hẹn khám bệnh"},{"categories":null,"contents":"Nền tảng chia sẻ công thức nấu ăn với hệ thống tài khoản Clerk, phân quyền quản trị, CRUD bài viết, đánh giá và tương tác.","date":"2025-10-20T00:00:00Z","permalink":"http://localhost:1313/portfolio/damh_cnpm/","tags":null,"title":"Đồ án môn Công nghệ phần mềm - Website chia sẻ công thức nấu ăn"},{"categories":["JavaScript"],"contents":"\u003cp\u003e\r\n\u003cfigure class=\"my-6\"\u003e\r\n  \u003cimg\r\n    src=\"/images/posts/fetch-vs-axios-kien-truc-http-client-interceptor.svg\"\r\n    alt=\"minh họa\"\r\n    loading=\"lazy\"\r\n    class=\"mx-auto block \"\u003e\r\n  \r\n\u003c/figure\u003e\u003c/p\u003e\n\u003cp\u003eSo sánh fetch và axios, thiết kế HTTP client chung, quản lý token, refresh và chuẩn hóa lỗi.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTừ khoá:\u003c/strong\u003e JavaScript, Axios, HTTP.\u003cbr\u003e\nTrong bài viết này, mình đi theo hướng \u003cem\u003ethực chiến\u003c/em\u003e: giải thích ngắn gọn, kèm checklist, bẫy thường gặp và ví dụ code để bạn có thể áp dụng ngay vào dự án.\u003c/p\u003e\n\u003ch2 id=\"1-so-sánh-nhanh\"\u003e1) So sánh nhanh\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003efetch\u003c/strong\u003e: native, cần tự xử lý JSON, lỗi 4xx/5xx không throw mặc định.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eaxios\u003c/strong\u003e: interceptor, baseURL, timeout mặc định ngon.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"2-http-client-tái-sử-dụng-axios\"\u003e2) HTTP client tái sử dụng (axios)\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eaxios\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;axios\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eexport\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eaxios\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ecreate\u003c/span\u003e({ \u003cspan style=\"color:#a6e22e\"\u003ebaseURL\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/api\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003etimeout\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5000\u003c/span\u003e });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003einterceptors\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003erequest\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003euse\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecfg\u003c/span\u003e =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// gắn token nếu có\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecfg\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003einterceptors\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eresponse\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003euse\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eres\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eres\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// chuẩn hoá lỗi, refresh token...\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e Promise.\u003cspan style=\"color:#a6e22e\"\u003ereject\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"best-practices-nhanh\"\u003eBest-practices nhanh\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eGhi log có cấu trúc (JSON) + traceId.\u003c/li\u003e\n\u003cli\u003eTimeout hợp lý cho connect/read/write; tổng timeout (deadline) khi cần.\u003c/li\u003e\n\u003cli\u003eChuẩn hoá lỗi cho client; đừng lộ stacktrace ra ngoài.\u003c/li\u003e\n\u003cli\u003eViết kiểm thử với trường hợp \u003cstrong\u003elỗi\u003c/strong\u003e (timeout, 429, 5xx), không chỉ thành công.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"checklist-áp-dụng\"\u003eChecklist áp dụng\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Thiết kế protocol hoặc schema API rõ ràng.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Thêm retry/backoff có điều kiện.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Quan sát (metrics/log/trace) đầy đủ.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Tài liệu hoá ví dụ request/response (hoặc mock contract).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"kết-luận\"\u003eKết luận\u003c/h2\u003e\n\u003cp\u003eNhững nguyên tắc ở trên đủ để bạn triển khai và mở rộng trong bối cảnh dự án thực tế. Hãy clone lại ví dụ, chạy thử, thêm log và đo đạc; mọi tối ưu đều bắt đầu từ quan sát.\u003c/p\u003e","date":"2025-10-19T00:00:00Z","permalink":"http://localhost:1313/blog/fetch-vs-axios-kien-truc-http-client-interceptor/","tags":["JavaScript","Axios","HTTP"],"title":"Fetch vs Axios: kiến trúc HTTP client tái sử dụng với interceptor"},{"categories":["Java"],"contents":"\u003cp\u003e\r\n\u003cfigure class=\"my-6\"\u003e\r\n  \u003cimg\r\n    src=\"/images/posts/java-httpclient-11-sync-async-timeout-retry.svg\"\r\n    alt=\"minh họa\"\r\n    loading=\"lazy\"\r\n    class=\"mx-auto block \"\u003e\r\n  \r\n\u003c/figure\u003e\u003c/p\u003e\n\u003cp\u003eSử dụng HttpClient để gọi REST một cách hiện đại: cấu hình timeout, redirect, async và chiến lược retry.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTừ khoá:\u003c/strong\u003e Java, HTTP, API.\u003cbr\u003e\nTrong bài viết này, mình đi theo hướng \u003cem\u003ethực chiến\u003c/em\u003e: giải thích ngắn gọn, kèm checklist, bẫy thường gặp và ví dụ code để bạn có thể áp dụng ngay vào dự án.\u003c/p\u003e\n\u003ch2 id=\"1-thiết-lập-cơ-bản\"\u003e1) Thiết lập cơ bản\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eHttpClient\u003c/code\u003e (Java 11+) hỗ trợ sync/async, HTTP/2, redirect, timeout.\u003c/p\u003e","date":"2025-10-19T00:00:00Z","permalink":"http://localhost:1313/blog/java-httpclient-11-sync-async-timeout-retry/","tags":["Java","HTTP","API"],"title":"Java 11+ HttpClient: gọi API sync/async, timeout và retry"},{"categories":["Java"],"contents":"\u003cp\u003e\r\n\u003cfigure class=\"my-6\"\u003e\r\n  \u003cimg\r\n    src=\"/images/posts/java-concurrency-ung-dung-mang-threadpool-backpressure-metrics.svg\"\r\n    alt=\"minh họa\"\r\n    loading=\"lazy\"\r\n    class=\"mx-auto block \"\u003e\r\n  \r\n\u003c/figure\u003e\u003c/p\u003e\n\u003cp\u003eLựa chọn mô hình xử lý đồng thời, thiết kế hàng đợi, chống quá tải và đo đạc độ trễ thông qua metrics.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTừ khoá:\u003c/strong\u003e Java, Concurrency, ThreadPool.\u003cbr\u003e\nTrong bài viết này, mình đi theo hướng \u003cem\u003ethực chiến\u003c/em\u003e: giải thích ngắn gọn, kèm checklist, bẫy thường gặp và ví dụ code để bạn có thể áp dụng ngay vào dự án.\u003c/p\u003e\n\u003ch2 id=\"1-mô-hình-đồng-thời\"\u003e1) Mô hình đồng thời\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eThread-per-connection\u003c/strong\u003e: dễ, nhưng tốn tài nguyên.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eThreadPool + Queue\u003c/strong\u003e: cân bằng, giới hạn tải.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNIO/Reactive\u003c/strong\u003e: hiệu quả cho IO-bound.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"2-backpressure--hàng-đợi\"\u003e2) Backpressure \u0026amp; hàng đợi\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eGiới hạn độ dài queue; từ chối sớm khi quá tải.\u003c/li\u003e\n\u003cli\u003eƯu tiên tác vụ quan trọng.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"3-metrics\"\u003e3) Metrics\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eĐo độ trễ p95/p99, số lượng request đang xử lý, tỷ lệ lỗi.\u003c/li\u003e\n\u003cli\u003eXuất Prometheus/Grafana để theo dõi.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"best-practices-nhanh\"\u003eBest-practices nhanh\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eGhi log có cấu trúc (JSON) + traceId.\u003c/li\u003e\n\u003cli\u003eTimeout hợp lý cho connect/read/write; tổng timeout (deadline) khi cần.\u003c/li\u003e\n\u003cli\u003eChuẩn hoá lỗi cho client; đừng lộ stacktrace ra ngoài.\u003c/li\u003e\n\u003cli\u003eViết kiểm thử với trường hợp \u003cstrong\u003elỗi\u003c/strong\u003e (timeout, 429, 5xx), không chỉ thành công.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"checklist-áp-dụng\"\u003eChecklist áp dụng\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Thiết kế protocol hoặc schema API rõ ràng.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Thêm retry/backoff có điều kiện.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Quan sát (metrics/log/trace) đầy đủ.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Tài liệu hoá ví dụ request/response (hoặc mock contract).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"kết-luận\"\u003eKết luận\u003c/h2\u003e\n\u003cp\u003eNhững nguyên tắc ở trên đủ để bạn triển khai và mở rộng trong bối cảnh dự án thực tế. Hãy clone lại ví dụ, chạy thử, thêm log và đo đạc; mọi tối ưu đều bắt đầu từ quan sát.\u003c/p\u003e","date":"2025-10-19T00:00:00Z","permalink":"http://localhost:1313/blog/java-concurrency-ung-dung-mang-threadpool-backpressure-metrics/","tags":["Java","Concurrency","ThreadPool"],"title":"Java Concurrency cho ứng dụng mạng: ThreadPool, Backpressure và Metrics"},{"categories":["Java"],"contents":"\u003cp\u003e\r\n\u003cfigure class=\"my-6\"\u003e\r\n  \u003cimg\r\n    src=\"/images/posts/java-nio-selector-hang-nghin-ket-noi.svg\"\r\n    alt=\"minh họa\"\r\n    loading=\"lazy\"\r\n    class=\"mx-auto block \"\u003e\r\n  \r\n\u003c/figure\u003e\u003c/p\u003e\n\u003cp\u003eKiến trúc non-blocking với Channel/Selector, mô hình state machine cho mỗi kết nối và tối ưu buffer.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTừ khoá:\u003c/strong\u003e Java, NIO, Selector, Concurrency.\u003cbr\u003e\nTrong bài viết này, mình đi theo hướng \u003cem\u003ethực chiến\u003c/em\u003e: giải thích ngắn gọn, kèm checklist, bẫy thường gặp và ví dụ code để bạn có thể áp dụng ngay vào dự án.\u003c/p\u003e\n\u003ch2 id=\"1-vì-sao-nio\"\u003e1) Vì sao NIO?\u003c/h2\u003e\n\u003cp\u003eVới mô hình “mỗi kết nối một thread”, chi phí context-switch + bộ nhớ tăng mạnh khi có hàng nghìn kết nối. \u003cstrong\u003eNIO (non-blocking I/O)\u003c/strong\u003e dùng \u003ccode\u003eSelector\u003c/code\u003e để theo dõi nhiều kênh (Channel) trên \u003cstrong\u003eít thread\u003c/strong\u003e.\u003c/p\u003e","date":"2025-10-19T00:00:00Z","permalink":"http://localhost:1313/blog/java-nio-selector-hang-nghin-ket-noi/","tags":["Java","NIO","Selector","Concurrency"],"title":"Java NIO \u0026 Selector: Xử lý hàng nghìn kết nối trên một thread"},{"categories":["Java"],"contents":"\u003cp\u003e\r\n\u003cfigure class=\"my-6\"\u003e\r\n  \u003cimg\r\n    src=\"/images/posts/java-socket-tcp-co-ban.svg\"\r\n    alt=\"minh họa\"\r\n    loading=\"lazy\"\r\n    class=\"mx-auto block \"\u003e\r\n  \r\n\u003c/figure\u003e\u003c/p\u003e\n\u003cp\u003eBắt đầu với lập trình mạng bằng Java: tạo TCP server/client, quy ước thông điệp, xử lý đóng kết nối an toàn.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTừ khoá:\u003c/strong\u003e Java, Networking, TCP, Socket.\u003cbr\u003e\nTrong bài viết này, mình đi theo hướng \u003cem\u003ethực chiến\u003c/em\u003e: giải thích ngắn gọn, kèm checklist, bẫy thường gặp và ví dụ code để bạn có thể áp dụng ngay vào dự án.\u003c/p\u003e\n\u003ch2 id=\"1-mô-hình-clientserver--giao-thức\"\u003e1) Mô hình Client/Server \u0026amp; giao thức\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eServer\u003c/strong\u003e mở port (ví dụ 8080), chấp nhận kết nối mới và tạo luồng đọc/ghi cho từng client.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eClient\u003c/strong\u003e kết nối \u003ccode\u003ehost:port\u003c/code\u003e, gửi thông điệp theo một \u003cstrong\u003equy ước\u003c/strong\u003e (protocol) đơn giản để 2 bên hiểu nhau.\u003c/li\u003e\n\u003cli\u003eChọn \u003cstrong\u003edelimiter\u003c/strong\u003e (\u003ccode\u003e\\n\u003c/code\u003e) hoặc \u003cstrong\u003elength-prefix\u003c/strong\u003e (gửi trước độ dài) để tránh dính/chia gói.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"2-ví-dụ-server-tối-giản-java\"\u003e2) Ví dụ server tối giản (Java)\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e java.io.*;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e java.net.*;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eEchoServer\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(String\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e args) \u003cspan style=\"color:#66d9ef\"\u003ethrows\u003c/span\u003e Exception {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e (ServerSocket ss \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ServerSocket(8080)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      System.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Listening on 8080\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Socket s \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e ss.\u003cspan style=\"color:#a6e22e\"\u003eaccept\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Thread(() \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e handle(s)).\u003cspan style=\"color:#a6e22e\"\u003estart\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehandle\u003c/span\u003e(Socket s) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e (s;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      BufferedReader in \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e BufferedReader(\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e InputStreamReader(s.\u003cspan style=\"color:#a6e22e\"\u003egetInputStream\u003c/span\u003e()));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      PrintWriter out \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e PrintWriter(s.\u003cspan style=\"color:#a6e22e\"\u003egetOutputStream\u003c/span\u003e(), \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      String line;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e ((line \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e in.\u003cspan style=\"color:#a6e22e\"\u003ereadLine\u003c/span\u003e()) \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;quit\u0026#34;\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eequalsIgnoreCase\u003c/span\u003e(line)) \u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        out.\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;echo:\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e line);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003ecatch\u003c/span\u003e (IOException e) { e.\u003cspan style=\"color:#a6e22e\"\u003eprintStackTrace\u003c/span\u003e(); }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"3-client\"\u003e3) Client\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e java.io.*;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e java.net.*;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eEchoClient\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(String\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e args) \u003cspan style=\"color:#66d9ef\"\u003ethrows\u003c/span\u003e Exception {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e (Socket s \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Socket(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;127.0.0.1\u0026#34;\u003c/span\u003e, 8080);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e         BufferedReader in \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e BufferedReader(\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e InputStreamReader(s.\u003cspan style=\"color:#a6e22e\"\u003egetInputStream\u003c/span\u003e()));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e         PrintWriter out \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e PrintWriter(s.\u003cspan style=\"color:#a6e22e\"\u003egetOutputStream\u003c/span\u003e(), \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      out.\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      System.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e(in.\u003cspan style=\"color:#a6e22e\"\u003ereadLine\u003c/span\u003e());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"4-checklist-an-toàn\"\u003e4) Checklist an toàn\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eTimeout đọc/ghi; đóng tài nguyên với \u003ccode\u003etry-with-resources\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eGhi log có \u003cstrong\u003erequest-id\u003c/strong\u003e để trace.\u003c/li\u003e\n\u003cli\u003eĐịnh nghĩa rõ \u003cstrong\u003eprotocol\u003c/strong\u003e từ đầu; có phiên bản (v1, v2) để nâng cấp.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"best-practices-nhanh\"\u003eBest-practices nhanh\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eGhi log có cấu trúc (JSON) + traceId.\u003c/li\u003e\n\u003cli\u003eTimeout hợp lý cho connect/read/write; tổng timeout (deadline) khi cần.\u003c/li\u003e\n\u003cli\u003eChuẩn hoá lỗi cho client; đừng lộ stacktrace ra ngoài.\u003c/li\u003e\n\u003cli\u003eViết kiểm thử với trường hợp \u003cstrong\u003elỗi\u003c/strong\u003e (timeout, 429, 5xx), không chỉ thành công.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"checklist-áp-dụng\"\u003eChecklist áp dụng\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Thiết kế protocol hoặc schema API rõ ràng.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Thêm retry/backoff có điều kiện.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Quan sát (metrics/log/trace) đầy đủ.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Tài liệu hoá ví dụ request/response (hoặc mock contract).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"kết-luận\"\u003eKết luận\u003c/h2\u003e\n\u003cp\u003eNhững nguyên tắc ở trên đủ để bạn triển khai và mở rộng trong bối cảnh dự án thực tế. Hãy clone lại ví dụ, chạy thử, thêm log và đo đạc; mọi tối ưu đều bắt đầu từ quan sát.\u003c/p\u003e","date":"2025-10-19T00:00:00Z","permalink":"http://localhost:1313/blog/java-socket-tcp-co-ban/","tags":["Java","Networking","TCP","Socket"],"title":"Java Socket TCP cơ bản: Client/Server và giao thức thông điệp đơn giản"},{"categories":["JavaScript"],"contents":"\u003cp\u003e\r\n\u003cfigure class=\"my-6\"\u003e\r\n  \u003cimg\r\n    src=\"/images/posts/javascript-event-loop-async-await-microtask-network-io.svg\"\r\n    alt=\"minh họa\"\r\n    loading=\"lazy\"\r\n    class=\"mx-auto block \"\u003e\r\n  \r\n\u003c/figure\u003e\u003c/p\u003e\n\u003cp\u003eGiải thích cơ chế Event Loop, macro/microtask, cách viết async/await đúng và tránh nghẽn UI.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTừ khoá:\u003c/strong\u003e JavaScript, Event Loop, Async.\u003cbr\u003e\nTrong bài viết này, mình đi theo hướng \u003cem\u003ethực chiến\u003c/em\u003e: giải thích ngắn gọn, kèm checklist, bẫy thường gặp và ví dụ code để bạn có thể áp dụng ngay vào dự án.\u003c/p\u003e\n\u003ch2 id=\"1-macro-vs-microtask\"\u003e1) Macro vs Microtask\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eMacro\u003c/strong\u003e: setTimeout, setInterval, I/O.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMicro\u003c/strong\u003e: Promise callbacks, queue ưu tiên cao hơn.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"2-asyncawait-đúng-cách\"\u003e2) async/await đúng cách\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eTránh \u003ccode\u003eawait\u003c/code\u003e tuần tự trong vòng lặp nếu có thể \u003ccode\u003ePromise.all\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eBọc lỗi bằng try/catch hoặc \u003ccode\u003e.catch()\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003easync\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eload\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e [\u003cspan style=\"color:#a6e22e\"\u003eu\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ep\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eawait\u003c/span\u003e Promise.\u003cspan style=\"color:#a6e22e\"\u003eall\u003c/span\u003e([\u003cspan style=\"color:#a6e22e\"\u003efetch\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/users\u0026#39;\u003c/span\u003e), \u003cspan style=\"color:#a6e22e\"\u003efetch\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/posts\u0026#39;\u003c/span\u003e)]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// ...\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"best-practices-nhanh\"\u003eBest-practices nhanh\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eGhi log có cấu trúc (JSON) + traceId.\u003c/li\u003e\n\u003cli\u003eTimeout hợp lý cho connect/read/write; tổng timeout (deadline) khi cần.\u003c/li\u003e\n\u003cli\u003eChuẩn hoá lỗi cho client; đừng lộ stacktrace ra ngoài.\u003c/li\u003e\n\u003cli\u003eViết kiểm thử với trường hợp \u003cstrong\u003elỗi\u003c/strong\u003e (timeout, 429, 5xx), không chỉ thành công.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"checklist-áp-dụng\"\u003eChecklist áp dụng\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Thiết kế protocol hoặc schema API rõ ràng.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Thêm retry/backoff có điều kiện.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Quan sát (metrics/log/trace) đầy đủ.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Tài liệu hoá ví dụ request/response (hoặc mock contract).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"kết-luận\"\u003eKết luận\u003c/h2\u003e\n\u003cp\u003eNhững nguyên tắc ở trên đủ để bạn triển khai và mở rộng trong bối cảnh dự án thực tế. Hãy clone lại ví dụ, chạy thử, thêm log và đo đạc; mọi tối ưu đều bắt đầu từ quan sát.\u003c/p\u003e","date":"2025-10-19T00:00:00Z","permalink":"http://localhost:1313/blog/javascript-event-loop-async-await-microtask-network-io/","tags":["JavaScript","Event Loop","Async"],"title":"JavaScript Event Loop: hiểu đúng async/await, microtask \u0026 network I/O"},{"categories":["Java"],"contents":"\u003cp\u003e\r\n\u003cfigure class=\"my-6\"\u003e\r\n  \u003cimg\r\n    src=\"/images/posts/kiem-thu-network-java-junit-wiremock.svg\"\r\n    alt=\"minh họa\"\r\n    loading=\"lazy\"\r\n    class=\"mx-auto block \"\u003e\r\n  \r\n\u003c/figure\u003e\u003c/p\u003e\n\u003cp\u003eMock server HTTP, giả lập tình huống lỗi, timeouts, và viết test đáng tin cậy cho logic mạng.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTừ khoá:\u003c/strong\u003e Java, Testing, WireMock, JUnit.\u003cbr\u003e\nTrong bài viết này, mình đi theo hướng \u003cem\u003ethực chiến\u003c/em\u003e: giải thích ngắn gọn, kèm checklist, bẫy thường gặp và ví dụ code để bạn có thể áp dụng ngay vào dự án.\u003c/p\u003e\n\u003ch2 id=\"1-vì-sao-cần-mock\"\u003e1) Vì sao cần mock?\u003c/h2\u003e\n\u003cp\u003eKiểm thử code mạng \u003cstrong\u003ekhông phụ thuộc\u003c/strong\u003e hệ thống bên ngoài. \u003ccode\u003eWireMock\u003c/code\u003e giúp giả lập API với scenario, delay, lỗi…\u003c/p\u003e","date":"2025-10-19T00:00:00Z","permalink":"http://localhost:1313/blog/kiem-thu-network-java-junit-wiremock/","tags":["Java","Testing","WireMock","JUnit"],"title":"Kiểm thử code mạng Java với JUnit \u0026 WireMock"},{"categories":["JavaScript"],"contents":"\u003cp\u003e\r\n\u003cfigure class=\"my-6\"\u003e\r\n  \u003cimg\r\n    src=\"/images/posts/nodejs-tcp-udp-net-dgram-server-hieu-nang.svg\"\r\n    alt=\"minh họa\"\r\n    loading=\"lazy\"\r\n    class=\"mx-auto block \"\u003e\r\n  \r\n\u003c/figure\u003e\u003c/p\u003e\n\u003cp\u003eXây dựng TCP/UDP server với net/dgram, xử lý split/merge packet và shutdown an toàn.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTừ khoá:\u003c/strong\u003e Node.js, TCP, UDP.\u003cbr\u003e\nTrong bài viết này, mình đi theo hướng \u003cem\u003ethực chiến\u003c/em\u003e: giải thích ngắn gọn, kèm checklist, bẫy thường gặp và ví dụ code để bạn có thể áp dụng ngay vào dự án.\u003c/p\u003e\n\u003ch2 id=\"1-tcp-với-net\"\u003e1) TCP với \u003ccode\u003enet\u003c/code\u003e\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enet\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erequire\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;net\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eserver\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enet\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ecreateServer\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003esock\u003c/span\u003e =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003esock\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eon\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;data\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ebuf\u003c/span\u003e =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// xử lý split/merge packet bằng delimiter hoặc length-prefix\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003esock\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ewrite\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eBuffer\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003efrom\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;echo:\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebuf\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eserver\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elisten\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e8080\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"2-udp-với-dgram\"\u003e2) UDP với \u003ccode\u003edgram\u003c/code\u003e\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edgram\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erequire\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;dgram\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esock\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edgram\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ecreateSocket\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;udp4\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003esock\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eon\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;message\u0026#39;\u003c/span\u003e, (\u003cspan style=\"color:#a6e22e\"\u003emsg\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003erinfo\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003esock\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003esend\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emsg\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003erinfo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eport\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003erinfo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eaddress\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003esock\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ebind\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e9999\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"best-practices-nhanh\"\u003eBest-practices nhanh\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eGhi log có cấu trúc (JSON) + traceId.\u003c/li\u003e\n\u003cli\u003eTimeout hợp lý cho connect/read/write; tổng timeout (deadline) khi cần.\u003c/li\u003e\n\u003cli\u003eChuẩn hoá lỗi cho client; đừng lộ stacktrace ra ngoài.\u003c/li\u003e\n\u003cli\u003eViết kiểm thử với trường hợp \u003cstrong\u003elỗi\u003c/strong\u003e (timeout, 429, 5xx), không chỉ thành công.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"checklist-áp-dụng\"\u003eChecklist áp dụng\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Thiết kế protocol hoặc schema API rõ ràng.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Thêm retry/backoff có điều kiện.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Quan sát (metrics/log/trace) đầy đủ.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Tài liệu hoá ví dụ request/response (hoặc mock contract).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"kết-luận\"\u003eKết luận\u003c/h2\u003e\n\u003cp\u003eNhững nguyên tắc ở trên đủ để bạn triển khai và mở rộng trong bối cảnh dự án thực tế. Hãy clone lại ví dụ, chạy thử, thêm log và đo đạc; mọi tối ưu đều bắt đầu từ quan sát.\u003c/p\u003e","date":"2025-10-19T00:00:00Z","permalink":"http://localhost:1313/blog/nodejs-tcp-udp-net-dgram-server-hieu-nang/","tags":["Node.js","TCP","UDP"],"title":"Node.js TCP/UDP: net \u0026 dgram cho server hiệu năng"},{"categories":["General"],"contents":"\u003cp\u003e\r\n\u003cfigure class=\"my-6\"\u003e\r\n  \u003cimg\r\n    src=\"/images/posts/tang-do-ben-mang-retry-backoff-circuit-breaker-java-js.svg\"\r\n    alt=\"minh họa\"\r\n    loading=\"lazy\"\r\n    class=\"mx-auto block \"\u003e\r\n  \r\n\u003c/figure\u003e\u003c/p\u003e\n\u003cp\u003eMẫu thiết kế chống lỗi mạng: exponential backoff, jitter, circuit breaker và idempotency.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTừ khoá:\u003c/strong\u003e Resilience, Java, JavaScript.\u003cbr\u003e\nTrong bài viết này, mình đi theo hướng \u003cem\u003ethực chiến\u003c/em\u003e: giải thích ngắn gọn, kèm checklist, bẫy thường gặp và ví dụ code để bạn có thể áp dụng ngay vào dự án.\u003c/p\u003e\n\u003ch2 id=\"1-retry--backoff\"\u003e1) Retry \u0026amp; Backoff\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eExponential backoff + jitter (random) để tránh đồng bộ giao động.\u003c/li\u003e\n\u003cli\u003ePhân loại lỗi: \u003cem\u003eretryable\u003c/em\u003e (timeout, 5xx) vs \u003cem\u003enon-retryable\u003c/em\u003e (4xx).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"2-circuit-breaker\"\u003e2) Circuit Breaker\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eTrạng thái: \u003cstrong\u003eClosed → Open → Half-Open\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eMở mạch khi tỉ lệ lỗi vượt ngưỡng; thử lại nhỏ giọt ở Half-Open.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"3-idempotency\"\u003e3) Idempotency\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eĐảm bảo request có thể lặp lại an toàn (idempotency key).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"best-practices-nhanh\"\u003eBest-practices nhanh\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eGhi log có cấu trúc (JSON) + traceId.\u003c/li\u003e\n\u003cli\u003eTimeout hợp lý cho connect/read/write; tổng timeout (deadline) khi cần.\u003c/li\u003e\n\u003cli\u003eChuẩn hoá lỗi cho client; đừng lộ stacktrace ra ngoài.\u003c/li\u003e\n\u003cli\u003eViết kiểm thử với trường hợp \u003cstrong\u003elỗi\u003c/strong\u003e (timeout, 429, 5xx), không chỉ thành công.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"checklist-áp-dụng\"\u003eChecklist áp dụng\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Thiết kế protocol hoặc schema API rõ ràng.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Thêm retry/backoff có điều kiện.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Quan sát (metrics/log/trace) đầy đủ.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Tài liệu hoá ví dụ request/response (hoặc mock contract).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"kết-luận\"\u003eKết luận\u003c/h2\u003e\n\u003cp\u003eNhững nguyên tắc ở trên đủ để bạn triển khai và mở rộng trong bối cảnh dự án thực tế. Hãy clone lại ví dụ, chạy thử, thêm log và đo đạc; mọi tối ưu đều bắt đầu từ quan sát.\u003c/p\u003e","date":"2025-10-19T00:00:00Z","permalink":"http://localhost:1313/blog/tang-do-ben-mang-retry-backoff-circuit-breaker-java-js/","tags":["Resilience","Java","JavaScript"],"title":"Tăng độ bền mạng: Retry, Backoff, Circuit Breaker cho Java \u0026 JS"},{"categories":["JavaScript"],"contents":"\u003cp\u003e\r\n\u003cfigure class=\"my-6\"\u003e\r\n  \u003cimg\r\n    src=\"/images/posts/websocket-co-ban-realtime-trinh-duyet-node.svg\"\r\n    alt=\"minh họa\"\r\n    loading=\"lazy\"\r\n    class=\"mx-auto block \"\u003e\r\n  \r\n\u003c/figure\u003e\u003c/p\u003e\n\u003cp\u003eThiết lập kết nối 2 chiều, xác thực JWT, ping/pong, reconnect và phân kênh (rooms).\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTừ khoá:\u003c/strong\u003e JavaScript, WebSocket, Realtime.\u003cbr\u003e\nTrong bài viết này, mình đi theo hướng \u003cem\u003ethực chiến\u003c/em\u003e: giải thích ngắn gọn, kèm checklist, bẫy thường gặp và ví dụ code để bạn có thể áp dụng ngay vào dự án.\u003c/p\u003e\n\u003ch2 id=\"1-trình-duyệt\"\u003e1) Trình duyệt\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ews\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWebSocket\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;wss://example.com/ws?token=JWT\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ews\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eonopen\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e () =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ews\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003esend\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;hello\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ews\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eonmessage\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eev\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003econsole\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eev\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"2-node-server-ws\"\u003e2) Node server (ws)\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWebSocket\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erequire\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;ws\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewss\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWebSocket\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eServer\u003c/span\u003e({ \u003cspan style=\"color:#a6e22e\"\u003eport\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e8081\u003c/span\u003e });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ewss\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eon\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;connection\u0026#39;\u003c/span\u003e, (\u003cspan style=\"color:#a6e22e\"\u003esock\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003esock\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eon\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;message\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003esock\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003esend\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;echo:\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003em\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// ping/pong\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eping\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esetInterval\u003c/span\u003e(() =\u0026gt; { \u003cspan style=\"color:#a6e22e\"\u003esock\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eping\u003c/span\u003e(); }, \u003cspan style=\"color:#ae81ff\"\u003e30000\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003esock\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eon\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;close\u0026#39;\u003c/span\u003e, () =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eclearInterval\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eping\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"best-practices-nhanh\"\u003eBest-practices nhanh\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eGhi log có cấu trúc (JSON) + traceId.\u003c/li\u003e\n\u003cli\u003eTimeout hợp lý cho connect/read/write; tổng timeout (deadline) khi cần.\u003c/li\u003e\n\u003cli\u003eChuẩn hoá lỗi cho client; đừng lộ stacktrace ra ngoài.\u003c/li\u003e\n\u003cli\u003eViết kiểm thử với trường hợp \u003cstrong\u003elỗi\u003c/strong\u003e (timeout, 429, 5xx), không chỉ thành công.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"checklist-áp-dụng\"\u003eChecklist áp dụng\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Thiết kế protocol hoặc schema API rõ ràng.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Thêm retry/backoff có điều kiện.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Quan sát (metrics/log/trace) đầy đủ.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Tài liệu hoá ví dụ request/response (hoặc mock contract).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"kết-luận\"\u003eKết luận\u003c/h2\u003e\n\u003cp\u003eNhững nguyên tắc ở trên đủ để bạn triển khai và mở rộng trong bối cảnh dự án thực tế. Hãy clone lại ví dụ, chạy thử, thêm log và đo đạc; mọi tối ưu đều bắt đầu từ quan sát.\u003c/p\u003e","date":"2025-10-19T00:00:00Z","permalink":"http://localhost:1313/blog/websocket-co-ban-realtime-trinh-duyet-node/","tags":["JavaScript","WebSocket","Realtime"],"title":"WebSocket cơ bản: realtime trên trình duyệt \u0026 Node"},{"categories":["Java"],"contents":"\u003cp\u003e3 mô hình phổ biến:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eThread-per-connection\u003c/strong\u003e (dễ nhất, tốn tài nguyên),\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eThreadPool + Queue\u003c/strong\u003e (cân bằng hơn),\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNIO/Reactive\u003c/strong\u003e (hiệu năng cao).\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eGợi ý: dùng \u003ccode\u003eExecutorService\u003c/code\u003e, giới hạn pool, đo độ trễ/tải, và quản lý backpressure (hàng đợi). Với IO-bound, ưu tiên NIO/Reactor/Vert.x/Spring WebFlux.\u003c/p\u003e","date":"2025-10-09T00:00:00Z","permalink":"http://localhost:1313/blog/java-concurrency-cho-ung-dung-mang/","tags":["Java","Concurrency","ThreadPool"],"title":"Concurrency trong ứng dụng mạng Java"},{"categories":["JavaScript"],"contents":"\u003cp\u003e\u003ccode\u003efetch\u003c/code\u003e là native, \u003ccode\u003eaxios\u003c/code\u003e tiện alias \u0026amp; interceptor. Best-practices:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTạo \u003cstrong\u003eHTTP client\u003c/strong\u003e dùng chung (baseURL, timeout, headers).\u003c/li\u003e\n\u003cli\u003eInterceptor xử lý token \u0026amp; lỗi 401/403.\u003c/li\u003e\n\u003cli\u003eChuẩn hoá response (success/data/error), có retry/backoff cho lỗi mạng tạm thời.\u003c/li\u003e\n\u003c/ul\u003e","date":"2025-10-09T00:00:00Z","permalink":"http://localhost:1313/blog/js-fetch-axios-xu-ly-api/","tags":["JavaScript","HTTP","Axios"],"title":"Fetch vs Axios: gọi API hiệu quả"},{"categories":["Java"],"contents":"\u003cp\u003e\u003ccode\u003ejava.net.http.HttpClient\u003c/code\u003e (Java 11+) đơn giản hoá gọi REST:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTạo \u003ccode\u003eHttpClient\u003c/code\u003e, \u003ccode\u003eHttpRequest\u003c/code\u003e, sau đó \u003ccode\u003esend()\u003c/code\u003e (sync) hoặc \u003ccode\u003esendAsync()\u003c/code\u003e (CompletableFuture).\u003c/li\u003e\n\u003cli\u003eDễ set timeout, redirect, header; parse JSON với Jackson/Gson.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eVí dụ: GET/POST, retry (tự viết), log request/response, và best-practices (timeout, circuit-breaker bên ngoài như Resilience4j).\u003c/p\u003e","date":"2025-10-09T00:00:00Z","permalink":"http://localhost:1313/blog/java-http-client-modern-11-plus/","tags":["Java","HTTP","API"],"title":"Java 11+: HttpClient hiện đại (sync/async)"},{"categories":["Java"],"contents":"\u003cp\u003eBài viết mở đầu chuỗi Java Network: tổng quan TCP/UDP, địa chỉ IP/Port, và mô hình Client/Server.\u003cbr\u003e\n\u003cstrong\u003eSocket\u003c/strong\u003e là điểm đầu cuối của kết nối mạng. Với Java, gói \u003ccode\u003ejava.net\u003c/code\u003e cung cấp \u003ccode\u003eSocket\u003c/code\u003e, \u003ccode\u003eServerSocket\u003c/code\u003e (TCP) và \u003ccode\u003eDatagramSocket\u003c/code\u003e (UDP).\u003cbr\u003e\n\u003cstrong\u003eKhi nào dùng TCP?\u003c/strong\u003e Khi cần tin cậy, có thứ tự. \u003cstrong\u003eKhi nào dùng UDP?\u003c/strong\u003e Khi cần tốc độ, chấp nhận mất mát (streaming, game).\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eMẹo học: phác thảo luồng dữ liệu từ client → server và log mọi trạng thái để dễ debug.\u003c/p\u003e","date":"2025-10-09T00:00:00Z","permalink":"http://localhost:1313/blog/java-co-ban-gioi-thieu-mang-socket/","tags":["Java","Networking","Socket"],"title":"Java cơ bản: Giới thiệu Lập trình Mạng \u0026 Socket"},{"categories":["Java"],"contents":"\u003cp\u003e\u003ccode\u003ejava.nio\u003c/code\u003e hỗ trợ \u003cstrong\u003enon-blocking I/O\u003c/strong\u003e với \u003ccode\u003eSelector\u003c/code\u003e + \u003ccode\u003eChannel\u003c/code\u003e, xử lý nhiều socket trên 1 thread.\u003cbr\u003e\nLợi ích: tiết kiệm tài nguyên hơn so với mỗi kết nối một thread.\u003cbr\u003e\nÝ tưởng chính:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eServerSocketChannel\u003c/code\u003e non-blocking + \u003ccode\u003eSelector\u003c/code\u003e theo dõi events \u003ccode\u003eOP_ACCEPT/OP_READ/OP_WRITE\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eBộ đệm \u003ccode\u003eByteBuffer\u003c/code\u003e tái sử dụng để giảm GC.\u003c/li\u003e\n\u003cli\u003eThiết kế \u003cstrong\u003estate machine\u003c/strong\u003e cho từng connection (đọc header → đọc body → xử lý → ghi).\u003c/li\u003e\n\u003c/ul\u003e","date":"2025-10-09T00:00:00Z","permalink":"http://localhost:1313/blog/java-nio-selector-va-channel/","tags":["Java","NIO","Concurrency"],"title":"Java NIO: Selector \u0026 Channel cho kết nối đồng thời"},{"categories":["Java"],"contents":"\u003cp\u003eVí dụ tối giản:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eServer\u003c/strong\u003e: mở \u003ccode\u003eServerSocket\u003c/code\u003e, chấp nhận \u003ccode\u003eSocket\u003c/code\u003e, đọc/ghi qua \u003ccode\u003eInputStream/OutputStream\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eClient\u003c/strong\u003e: tạo \u003ccode\u003eSocket(host, port)\u003c/code\u003e, gửi chuỗi, nhận phản hồi.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eCác bước an toàn:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eDùng \u003ccode\u003etry-with-resources\u003c/code\u003e để đóng tài nguyên.\u003c/li\u003e\n\u003cli\u003eQuy ước \u003cstrong\u003emessage protocol\u003c/strong\u003e (ví dụ: chuỗi JSON kết thúc bằng \u003ccode\u003e\\n\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eThử nghiệm bằng \u003ccode\u003etelnet\u003c/code\u003e/\u003ccode\u003enc\u003c/code\u003e để kiểm tra server.\u003c/li\u003e\n\u003c/ol\u003e","date":"2025-10-09T00:00:00Z","permalink":"http://localhost:1313/blog/java-socket-tcp-server-client-co-ban/","tags":["Java","TCP","Socket"],"title":"Java Socket TCP: Server/Client cơ bản"},{"categories":["JavaScript"],"contents":"\u003cp\u003eEvent Loop là trái tim của JS runtime. Network I/O diễn ra \u003cstrong\u003ebất đồng bộ\u003c/strong\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eTask Queue\u003c/strong\u003e (macro), \u003cstrong\u003eMicrotask Queue\u003c/strong\u003e (Promise callbacks).\u003c/li\u003e\n\u003cli\u003eThực hành: tránh block main thread, dùng \u003ccode\u003easync/await\u003c/code\u003e và \u003ccode\u003ePromise.allSettled\u003c/code\u003e khi cần.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eDebug tip: thêm timestamp và request-id khi log để truy lần.\u003c/p\u003e","date":"2025-10-09T00:00:00Z","permalink":"http://localhost:1313/blog/js-event-loop-network-io/","tags":["JavaScript","EventLoop","Async"],"title":"JavaScript Event Loop \u0026 Network I/O"},{"categories":["JavaScript"],"contents":"\u003cp\u003eNode.js cung cấp:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003enet\u003c/code\u003e để tạo TCP server/client,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edgram\u003c/code\u003e cho UDP socket.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMẹo:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThiết kế protocol rõ ràng (delimiters, length-prefix).\u003c/li\u003e\n\u003cli\u003eDùng \u003ccode\u003eBuffer\u003c/code\u003e đúng cách, chống split/merge packet.\u003c/li\u003e\n\u003cli\u003eThêm health-check \u0026amp; graceful shutdown (SIGINT/SIGTERM).\u003c/li\u003e\n\u003c/ul\u003e","date":"2025-10-09T00:00:00Z","permalink":"http://localhost:1313/blog/nodejs-net-module-tcp-udp/","tags":["Node.js","TCP","UDP"],"title":"Node.js: net(dành cho TCP) \u0026 dgram(cho UDP)"},{"categories":["JavaScript"],"contents":"\u003cp\u003eWebSocket cho kết nối \u003cstrong\u003e2 chiều\u003c/strong\u003e thời gian thực (chat, dashboard).\u003cbr\u003e\nFrontend: \u003ccode\u003enew WebSocket(url)\u003c/code\u003e; Backend: \u003ccode\u003ews\u003c/code\u003e (Node) hoặc Socket.IO (có fallback \u0026amp; rooms).\u003cbr\u003e\nLưu ý: xác thực (JWT qua query/header), ping/pong, auto-reconnect, phân kênh (rooms), và hạn mức message size.\u003c/p\u003e","date":"2025-10-09T00:00:00Z","permalink":"http://localhost:1313/blog/js-websocket-realtime-co-ban/","tags":["JavaScript","WebSocket","Realtime"],"title":"WebSocket cơ bản: realtime trong JS/Node"},{"categories":null,"contents":"\u003c!-- raw HTML omitted --\u003e\n\u003ch2 id=\"xin-chào-\"\u003eXin chào 👋\u003c/h2\u003e\n\u003cp\u003eMình là \u003cstrong\u003ePhương Dung\u003c/strong\u003e, developer yêu thích \u003cstrong\u003elập trình mạng\u003c/strong\u003e, thiết kế giao thức giao tiếp, tối ưu I/O và các hệ thống \u003cstrong\u003erealtime\u003c/strong\u003e. Blog này ghi lại kinh nghiệm thực chiến với \u003cstrong\u003eJava\u003c/strong\u003e và \u003cstrong\u003eNode.js\u003c/strong\u003e, từ TCP/UDP, WebSocket đến HTTP client resilient.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eHiện tại:\u003c/strong\u003e tập trung vào các mẫu \u003cstrong\u003eresilience\u003c/strong\u003e (retry/backoff, circuit breaker) và quan sát hệ thống (metrics/log/trace).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSở thích kỹ thuật:\u003c/strong\u003e concurrency, NIO/Selector, thiết kế API và kiểm thử tích hợp với WireMock.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"thông-tin-nhanh\"\u003eThông tin nhanh\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e📍 \u003cstrong\u003eĐịa điểm:\u003c/strong\u003e TP.HCM, Việt Nam\u003c/li\u003e\n\u003cli\u003e✉️ \u003cstrong\u003eEmail:\u003c/strong\u003e \u003ca href=\"mailto:phuongdungphan1207@gmail.com\"\u003ephuongdungphan1207@gmail.com\u003c/a\u003e\r\n\u003c/li\u003e\n\u003cli\u003e🧑‍💻 \u003cstrong\u003eGitHub:\u003c/strong\u003e \u003ca href=\"https://github.com/Acetyl12\" target=\"_blank\" rel=\"noopener\"\u003eAcetyl12\u003c/a\u003e\r\n\u003c/li\u003e\n\u003cli\u003e🔗 \u003cstrong\u003eFacebook:\u003c/strong\u003e \u003ca href=\"https://www.facebook.com/phuong.dung.phan.749391\" target=\"_blank\" rel=\"noopener\"\u003ephuong.dung.phan.749391\u003c/a\u003e\r\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"kỹ-năng-chính\"\u003eKỹ năng chính\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eJava:\u003c/strong\u003e Socket (TCP/UDP), NIO/Selector, HttpClient 11+, JUnit/WireMock\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eJavaScript/Node.js:\u003c/strong\u003e \u003ccode\u003enet\u003c/code\u003e, \u003ccode\u003edgram\u003c/code\u003e, \u003ccode\u003ews\u003c/code\u003e, Fetch/Axios, Event Loop\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eKiến trúc:\u003c/strong\u003e REST/WebSocket, backpressure, thiết kế protocol, idempotency\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDevOps:\u003c/strong\u003e GitHub Actions, build \u0026amp; deploy static site (Hugo + Pages)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"hành-trình\"\u003eHành trình\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e2024–nay:\u003c/strong\u003e Xây các service realtime nhỏ (WebSocket) và HTTP client resilient.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e2023–2024:\u003c/strong\u003e Thử nghiệm mô hình \u003cstrong\u003eNIO/Selector\u003c/strong\u003e cho server nhiều kết nối, tối ưu buffer \u0026amp; batch write.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTrước đó:\u003c/strong\u003e Viết các ứng dụng nhỏ TCP/UDP, thử nghiệm backpressure và logging có cấu trúc.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"dự-án-tiêu-biểu\"\u003eDự án tiêu biểu\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eJava Echo Server (TCP):\u003c/strong\u003e server multi-client, log trace-id, shutdown an toàn.\u003cbr\u003e\n→ \u003cem\u003eTech:\u003c/em\u003e Java, TCP, JUnit • \u003ca href=\"/portfolio/java-echo-server/\"\u003eXem chi tiết\u003c/a\u003e\r\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRealtime Chat (WebSocket):\u003c/strong\u003e rooms, ping/pong, JWT, reconnect client.\u003cbr\u003e\n→ \u003cem\u003eTech:\u003c/em\u003e Node.js, ws, JWT • \u003ca href=\"/portfolio/realtime-chat-js/\"\u003eXem chi tiết\u003c/a\u003e\r\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"chứng-chỉ--thành-tựu\"\u003eChứng chỉ \u0026amp; Thành tựu\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e(Điền chứng chỉ/giải thưởng của bạn, nếu có.)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"liên-hệ\"\u003eLiên hệ\u003c/h2\u003e\n\u003cp\u003eNếu bạn quan tâm đến chủ đề \u003cstrong\u003elập trình mạng\u003c/strong\u003e hay có góp ý cho bài viết, hãy email mình hoặc nhắn qua Facebook. Rất vui được kết nối! ✨\u003c/p\u003e","date":null,"permalink":"http://localhost:1313/about/","tags":null,"title":"About"}]