<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testing on Blog Lập Trình Mạng</title>
    <link>http://localhost:1313/blog-lap-trinh-mang-GNUD/tags/testing/</link>
    <description>Recent content in Testing on Blog Lập Trình Mạng</description>
    <generator>Hugo</generator>
    <language>vi</language>
    <lastBuildDate>Sun, 19 Oct 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/blog-lap-trinh-mang-GNUD/tags/testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kiểm thử code mạng Java với JUnit &amp; WireMock</title>
      <link>http://localhost:1313/blog-lap-trinh-mang-GNUD/blog/kiem-thu-network-java-junit-wiremock/</link>
      <pubDate>Sun, 19 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog-lap-trinh-mang-GNUD/blog/kiem-thu-network-java-junit-wiremock/</guid>
      <description>&lt;p&gt;Mock server HTTP, giả lập tình huống lỗi, timeouts, và viết test đáng tin cậy cho logic mạng.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Từ khoá:&lt;/strong&gt; Java, Testing, WireMock, JUnit.&lt;br&gt;&#xA;Trong bài viết này, mình đi theo hướng &lt;em&gt;thực chiến&lt;/em&gt;: giải thích ngắn gọn, kèm checklist, bẫy thường gặp và ví dụ code để bạn có thể áp dụng ngay vào dự án.&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-vì-sao-cần-mock&#34;&gt;1) Vì sao cần mock?&lt;/h2&gt;&#xA;&lt;p&gt;Trong lập trình mạng, code thường tương tác với server, API, hoặc socket, nên cần kiểm tra kỹ lưỡng. JUnit là framework kiểm thử đơn vị (unit testing) phổ biến trong Java, còn WireMock là công cụ giả lập (mocking) để mô phỏng phản hồi từ server mạng – rất hữu ích khi không muốn phụ thuộc vào server thật. Kiểm thử code mạng &lt;strong&gt;không phụ thuộc&lt;/strong&gt; hệ thống bên ngoài. &lt;code&gt;WireMock&lt;/code&gt; giúp giả lập API với scenario, delay, lỗi…&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
