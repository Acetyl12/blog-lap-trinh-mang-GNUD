[{"content":"3 mô hình phổ biến:\nThread-per-connection (dễ nhất, tốn tài nguyên), ThreadPool + Queue (cân bằng hơn), NIO/Reactive (hiệu năng cao). Gợi ý: dùng ExecutorService, giới hạn pool, đo độ trễ/tải, và quản lý backpressure (hàng đợi). Với IO-bound, ưu tiên NIO/Reactor/Vert.x/Spring WebFlux.\n","permalink":"http://localhost:1313/blog/java-concurrency-cho-ung-dung-mang/","summary":"\u003cp\u003e3 mô hình phổ biến:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eThread-per-connection\u003c/strong\u003e (dễ nhất, tốn tài nguyên),\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eThreadPool + Queue\u003c/strong\u003e (cân bằng hơn),\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNIO/Reactive\u003c/strong\u003e (hiệu năng cao).\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eGợi ý: dùng \u003ccode\u003eExecutorService\u003c/code\u003e, giới hạn pool, đo độ trễ/tải, và quản lý backpressure (hàng đợi). Với IO-bound, ưu tiên NIO/Reactor/Vert.x/Spring WebFlux.\u003c/p\u003e","title":"Concurrency trong ứng dụng mạng Java"},{"content":"fetch là native, axios tiện alias \u0026amp; interceptor. Best-practices:\nTạo HTTP client dùng chung (baseURL, timeout, headers). Interceptor xử lý token \u0026amp; lỗi 401/403. Chuẩn hoá response (success/data/error), có retry/backoff cho lỗi mạng tạm thời. ","permalink":"http://localhost:1313/blog/js-fetch-axios-xu-ly-api/","summary":"\u003cp\u003e\u003ccode\u003efetch\u003c/code\u003e là native, \u003ccode\u003eaxios\u003c/code\u003e tiện alias \u0026amp; interceptor. Best-practices:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTạo \u003cstrong\u003eHTTP client\u003c/strong\u003e dùng chung (baseURL, timeout, headers).\u003c/li\u003e\n\u003cli\u003eInterceptor xử lý token \u0026amp; lỗi 401/403.\u003c/li\u003e\n\u003cli\u003eChuẩn hoá response (success/data/error), có retry/backoff cho lỗi mạng tạm thời.\u003c/li\u003e\n\u003c/ul\u003e","title":"Fetch vs Axios: gọi API hiệu quả"},{"content":"java.net.http.HttpClient (Java 11+) đơn giản hoá gọi REST:\nTạo HttpClient, HttpRequest, sau đó send() (sync) hoặc sendAsync() (CompletableFuture). Dễ set timeout, redirect, header; parse JSON với Jackson/Gson. Ví dụ: GET/POST, retry (tự viết), log request/response, và best-practices (timeout, circuit-breaker bên ngoài như Resilience4j).\n","permalink":"http://localhost:1313/blog/java-http-client-modern-11-plus/","summary":"\u003cp\u003e\u003ccode\u003ejava.net.http.HttpClient\u003c/code\u003e (Java 11+) đơn giản hoá gọi REST:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTạo \u003ccode\u003eHttpClient\u003c/code\u003e, \u003ccode\u003eHttpRequest\u003c/code\u003e, sau đó \u003ccode\u003esend()\u003c/code\u003e (sync) hoặc \u003ccode\u003esendAsync()\u003c/code\u003e (CompletableFuture).\u003c/li\u003e\n\u003cli\u003eDễ set timeout, redirect, header; parse JSON với Jackson/Gson.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eVí dụ: GET/POST, retry (tự viết), log request/response, và best-practices (timeout, circuit-breaker bên ngoài như Resilience4j).\u003c/p\u003e","title":"Java 11+: HttpClient hiện đại (sync/async)"},{"content":"Bài viết mở đầu chuỗi Java Network: tổng quan TCP/UDP, địa chỉ IP/Port, và mô hình Client/Server.\nSocket là điểm đầu cuối của kết nối mạng. Với Java, gói java.net cung cấp Socket, ServerSocket (TCP) và DatagramSocket (UDP).\nKhi nào dùng TCP? Khi cần tin cậy, có thứ tự. Khi nào dùng UDP? Khi cần tốc độ, chấp nhận mất mát (streaming, game).\nMẹo học: phác thảo luồng dữ liệu từ client → server và log mọi trạng thái để dễ debug.\n","permalink":"http://localhost:1313/blog/java-co-ban-gioi-thieu-mang-socket/","summary":"\u003cp\u003eBài viết mở đầu chuỗi Java Network: tổng quan TCP/UDP, địa chỉ IP/Port, và mô hình Client/Server.\u003cbr\u003e\n\u003cstrong\u003eSocket\u003c/strong\u003e là điểm đầu cuối của kết nối mạng. Với Java, gói \u003ccode\u003ejava.net\u003c/code\u003e cung cấp \u003ccode\u003eSocket\u003c/code\u003e, \u003ccode\u003eServerSocket\u003c/code\u003e (TCP) và \u003ccode\u003eDatagramSocket\u003c/code\u003e (UDP).\u003cbr\u003e\n\u003cstrong\u003eKhi nào dùng TCP?\u003c/strong\u003e Khi cần tin cậy, có thứ tự. \u003cstrong\u003eKhi nào dùng UDP?\u003c/strong\u003e Khi cần tốc độ, chấp nhận mất mát (streaming, game).\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eMẹo học: phác thảo luồng dữ liệu từ client → server và log mọi trạng thái để dễ debug.\u003c/p\u003e","title":"Java cơ bản: Giới thiệu Lập trình Mạng \u0026 Socket"},{"content":"java.nio hỗ trợ non-blocking I/O với Selector + Channel, xử lý nhiều socket trên 1 thread.\nLợi ích: tiết kiệm tài nguyên hơn so với mỗi kết nối một thread.\nÝ tưởng chính:\nServerSocketChannel non-blocking + Selector theo dõi events OP_ACCEPT/OP_READ/OP_WRITE. Bộ đệm ByteBuffer tái sử dụng để giảm GC. Thiết kế state machine cho từng connection (đọc header → đọc body → xử lý → ghi). ","permalink":"http://localhost:1313/blog/java-nio-selector-va-channel/","summary":"\u003cp\u003e\u003ccode\u003ejava.nio\u003c/code\u003e hỗ trợ \u003cstrong\u003enon-blocking I/O\u003c/strong\u003e với \u003ccode\u003eSelector\u003c/code\u003e + \u003ccode\u003eChannel\u003c/code\u003e, xử lý nhiều socket trên 1 thread.\u003cbr\u003e\nLợi ích: tiết kiệm tài nguyên hơn so với mỗi kết nối một thread.\u003cbr\u003e\nÝ tưởng chính:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eServerSocketChannel\u003c/code\u003e non-blocking + \u003ccode\u003eSelector\u003c/code\u003e theo dõi events \u003ccode\u003eOP_ACCEPT/OP_READ/OP_WRITE\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eBộ đệm \u003ccode\u003eByteBuffer\u003c/code\u003e tái sử dụng để giảm GC.\u003c/li\u003e\n\u003cli\u003eThiết kế \u003cstrong\u003estate machine\u003c/strong\u003e cho từng connection (đọc header → đọc body → xử lý → ghi).\u003c/li\u003e\n\u003c/ul\u003e","title":"Java NIO: Selector \u0026 Channel cho kết nối đồng thời"},{"content":"Ví dụ tối giản:\nServer: mở ServerSocket, chấp nhận Socket, đọc/ghi qua InputStream/OutputStream. Client: tạo Socket(host, port), gửi chuỗi, nhận phản hồi. Các bước an toàn:\nDùng try-with-resources để đóng tài nguyên. Quy ước message protocol (ví dụ: chuỗi JSON kết thúc bằng \\n). Thử nghiệm bằng telnet/nc để kiểm tra server. ","permalink":"http://localhost:1313/blog/java-socket-tcp-server-client-co-ban/","summary":"\u003cp\u003eVí dụ tối giản:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eServer\u003c/strong\u003e: mở \u003ccode\u003eServerSocket\u003c/code\u003e, chấp nhận \u003ccode\u003eSocket\u003c/code\u003e, đọc/ghi qua \u003ccode\u003eInputStream/OutputStream\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eClient\u003c/strong\u003e: tạo \u003ccode\u003eSocket(host, port)\u003c/code\u003e, gửi chuỗi, nhận phản hồi.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eCác bước an toàn:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eDùng \u003ccode\u003etry-with-resources\u003c/code\u003e để đóng tài nguyên.\u003c/li\u003e\n\u003cli\u003eQuy ước \u003cstrong\u003emessage protocol\u003c/strong\u003e (ví dụ: chuỗi JSON kết thúc bằng \u003ccode\u003e\\n\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eThử nghiệm bằng \u003ccode\u003etelnet\u003c/code\u003e/\u003ccode\u003enc\u003c/code\u003e để kiểm tra server.\u003c/li\u003e\n\u003c/ol\u003e","title":"Java Socket TCP: Server/Client cơ bản"},{"content":"Event Loop là trái tim của JS runtime. Network I/O diễn ra bất đồng bộ:\nTask Queue (macro), Microtask Queue (Promise callbacks). Thực hành: tránh block main thread, dùng async/await và Promise.allSettled khi cần. Debug tip: thêm timestamp và request-id khi log để truy lần.\n","permalink":"http://localhost:1313/blog/js-event-loop-network-io/","summary":"\u003cp\u003eEvent Loop là trái tim của JS runtime. Network I/O diễn ra \u003cstrong\u003ebất đồng bộ\u003c/strong\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eTask Queue\u003c/strong\u003e (macro), \u003cstrong\u003eMicrotask Queue\u003c/strong\u003e (Promise callbacks).\u003c/li\u003e\n\u003cli\u003eThực hành: tránh block main thread, dùng \u003ccode\u003easync/await\u003c/code\u003e và \u003ccode\u003ePromise.allSettled\u003c/code\u003e khi cần.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eDebug tip: thêm timestamp và request-id khi log để truy lần.\u003c/p\u003e","title":"JavaScript Event Loop \u0026 Network I/O"},{"content":"Node.js cung cấp:\nnet để tạo TCP server/client, dgram cho UDP socket. Mẹo:\nThiết kế protocol rõ ràng (delimiters, length-prefix). Dùng Buffer đúng cách, chống split/merge packet. Thêm health-check \u0026amp; graceful shutdown (SIGINT/SIGTERM). ","permalink":"http://localhost:1313/blog/nodejs-net-module-tcp-udp/","summary":"\u003cp\u003eNode.js cung cấp:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003enet\u003c/code\u003e để tạo TCP server/client,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edgram\u003c/code\u003e cho UDP socket.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMẹo:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThiết kế protocol rõ ràng (delimiters, length-prefix).\u003c/li\u003e\n\u003cli\u003eDùng \u003ccode\u003eBuffer\u003c/code\u003e đúng cách, chống split/merge packet.\u003c/li\u003e\n\u003cli\u003eThêm health-check \u0026amp; graceful shutdown (SIGINT/SIGTERM).\u003c/li\u003e\n\u003c/ul\u003e","title":"Node.js: net(dành cho TCP) \u0026 dgram(cho UDP)"},{"content":"WebSocket cho kết nối 2 chiều thời gian thực (chat, dashboard).\nFrontend: new WebSocket(url); Backend: ws (Node) hoặc Socket.IO (có fallback \u0026amp; rooms).\nLưu ý: xác thực (JWT qua query/header), ping/pong, auto-reconnect, phân kênh (rooms), và hạn mức message size.\n","permalink":"http://localhost:1313/blog/js-websocket-realtime-co-ban/","summary":"\u003cp\u003eWebSocket cho kết nối \u003cstrong\u003e2 chiều\u003c/strong\u003e thời gian thực (chat, dashboard).\u003cbr\u003e\nFrontend: \u003ccode\u003enew WebSocket(url)\u003c/code\u003e; Backend: \u003ccode\u003ews\u003c/code\u003e (Node) hoặc Socket.IO (có fallback \u0026amp; rooms).\u003cbr\u003e\nLưu ý: xác thực (JWT qua query/header), ping/pong, auto-reconnect, phân kênh (rooms), và hạn mức message size.\u003c/p\u003e","title":"WebSocket cơ bản: realtime trong JS/Node"}]