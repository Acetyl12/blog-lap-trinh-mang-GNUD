<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Java on Blog Lập Trình Mạng</title>
    <link>http://localhost:1313/tags/java/</link>
    <description>Recent content in Java on Blog Lập Trình Mạng</description>
    <generator>Hugo -- 0.151.0</generator>
    <language>vi</language>
    <lastBuildDate>Thu, 09 Oct 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Concurrency trong ứng dụng mạng Java</title>
      <link>http://localhost:1313/blog/java-concurrency-cho-ung-dung-mang/</link>
      <pubDate>Thu, 09 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/java-concurrency-cho-ung-dung-mang/</guid>
      <description>&lt;p&gt;3 mô hình phổ biến:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Thread-per-connection&lt;/strong&gt; (dễ nhất, tốn tài nguyên),&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ThreadPool + Queue&lt;/strong&gt; (cân bằng hơn),&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NIO/Reactive&lt;/strong&gt; (hiệu năng cao).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Gợi ý: dùng &lt;code&gt;ExecutorService&lt;/code&gt;, giới hạn pool, đo độ trễ/tải, và quản lý backpressure (hàng đợi). Với IO-bound, ưu tiên NIO/Reactor/Vert.x/Spring WebFlux.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java 11&#43;: HttpClient hiện đại (sync/async)</title>
      <link>http://localhost:1313/blog/java-http-client-modern-11-plus/</link>
      <pubDate>Thu, 09 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/java-http-client-modern-11-plus/</guid>
      <description>&lt;p&gt;&lt;code&gt;java.net.http.HttpClient&lt;/code&gt; (Java 11+) đơn giản hoá gọi REST:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tạo &lt;code&gt;HttpClient&lt;/code&gt;, &lt;code&gt;HttpRequest&lt;/code&gt;, sau đó &lt;code&gt;send()&lt;/code&gt; (sync) hoặc &lt;code&gt;sendAsync()&lt;/code&gt; (CompletableFuture).&lt;/li&gt;
&lt;li&gt;Dễ set timeout, redirect, header; parse JSON với Jackson/Gson.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ví dụ: GET/POST, retry (tự viết), log request/response, và best-practices (timeout, circuit-breaker bên ngoài như Resilience4j).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java cơ bản: Giới thiệu Lập trình Mạng &amp; Socket</title>
      <link>http://localhost:1313/blog/java-co-ban-gioi-thieu-mang-socket/</link>
      <pubDate>Thu, 09 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/java-co-ban-gioi-thieu-mang-socket/</guid>
      <description>&lt;p&gt;Bài viết mở đầu chuỗi Java Network: tổng quan TCP/UDP, địa chỉ IP/Port, và mô hình Client/Server.&lt;br&gt;
&lt;strong&gt;Socket&lt;/strong&gt; là điểm đầu cuối của kết nối mạng. Với Java, gói &lt;code&gt;java.net&lt;/code&gt; cung cấp &lt;code&gt;Socket&lt;/code&gt;, &lt;code&gt;ServerSocket&lt;/code&gt; (TCP) và &lt;code&gt;DatagramSocket&lt;/code&gt; (UDP).&lt;br&gt;
&lt;strong&gt;Khi nào dùng TCP?&lt;/strong&gt; Khi cần tin cậy, có thứ tự. &lt;strong&gt;Khi nào dùng UDP?&lt;/strong&gt; Khi cần tốc độ, chấp nhận mất mát (streaming, game).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mẹo học: phác thảo luồng dữ liệu từ client → server và log mọi trạng thái để dễ debug.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java NIO: Selector &amp; Channel cho kết nối đồng thời</title>
      <link>http://localhost:1313/blog/java-nio-selector-va-channel/</link>
      <pubDate>Thu, 09 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/java-nio-selector-va-channel/</guid>
      <description>&lt;p&gt;&lt;code&gt;java.nio&lt;/code&gt; hỗ trợ &lt;strong&gt;non-blocking I/O&lt;/strong&gt; với &lt;code&gt;Selector&lt;/code&gt; + &lt;code&gt;Channel&lt;/code&gt;, xử lý nhiều socket trên 1 thread.&lt;br&gt;
Lợi ích: tiết kiệm tài nguyên hơn so với mỗi kết nối một thread.&lt;br&gt;
Ý tưởng chính:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ServerSocketChannel&lt;/code&gt; non-blocking + &lt;code&gt;Selector&lt;/code&gt; theo dõi events &lt;code&gt;OP_ACCEPT/OP_READ/OP_WRITE&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Bộ đệm &lt;code&gt;ByteBuffer&lt;/code&gt; tái sử dụng để giảm GC.&lt;/li&gt;
&lt;li&gt;Thiết kế &lt;strong&gt;state machine&lt;/strong&gt; cho từng connection (đọc header → đọc body → xử lý → ghi).&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Java Socket TCP: Server/Client cơ bản</title>
      <link>http://localhost:1313/blog/java-socket-tcp-server-client-co-ban/</link>
      <pubDate>Thu, 09 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/java-socket-tcp-server-client-co-ban/</guid>
      <description>&lt;p&gt;Ví dụ tối giản:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Server&lt;/strong&gt;: mở &lt;code&gt;ServerSocket&lt;/code&gt;, chấp nhận &lt;code&gt;Socket&lt;/code&gt;, đọc/ghi qua &lt;code&gt;InputStream/OutputStream&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Client&lt;/strong&gt;: tạo &lt;code&gt;Socket(host, port)&lt;/code&gt;, gửi chuỗi, nhận phản hồi.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Các bước an toàn:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Dùng &lt;code&gt;try-with-resources&lt;/code&gt; để đóng tài nguyên.&lt;/li&gt;
&lt;li&gt;Quy ước &lt;strong&gt;message protocol&lt;/strong&gt; (ví dụ: chuỗi JSON kết thúc bằng &lt;code&gt;\n&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Thử nghiệm bằng &lt;code&gt;telnet&lt;/code&gt;/&lt;code&gt;nc&lt;/code&gt; để kiểm tra server.&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
  </channel>
</rss>
