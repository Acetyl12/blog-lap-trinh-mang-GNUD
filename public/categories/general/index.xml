<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>General on Blog Lập Trình Mạng</title>
    <link>http://localhost:1313/categories/general/</link>
    <description>Recent content in General on Blog Lập Trình Mạng</description>
    <generator>Hugo</generator>
    <language>vi</language>
    <lastBuildDate>Sun, 19 Oct 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/general/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tăng độ bền mạng: Retry, Backoff, Circuit Breaker cho Java &amp; JS</title>
      <link>http://localhost:1313/blog/tang-do-ben-mang-retry-backoff-circuit-breaker-java-js/</link>
      <pubDate>Sun, 19 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/tang-do-ben-mang-retry-backoff-circuit-breaker-java-js/</guid>
      <description>&lt;p&gt;&#xD;&#xA;&lt;figure class=&#34;my-6&#34;&gt;&#xD;&#xA;  &lt;img&#xD;&#xA;    src=&#34;http://localhost:1313/images/posts/tang-do-ben-mang-retry-backoff-circuit-breaker-java-js.svg&#34;&#xD;&#xA;    alt=&#34;minh họa&#34;&#xD;&#xA;    loading=&#34;lazy&#34;&#xD;&#xA;    class=&#34;mx-auto block &#34;&gt;&#xD;&#xA;  &#xD;&#xA;&lt;/figure&gt;&lt;/p&gt;&#xA;&lt;p&gt;Mẫu thiết kế chống lỗi mạng: exponential backoff, jitter, circuit breaker và idempotency.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Từ khoá:&lt;/strong&gt; Resilience, Java, JavaScript.&lt;br&gt;&#xA;Trong bài viết này, mình đi theo hướng &lt;em&gt;thực chiến&lt;/em&gt;: giải thích ngắn gọn, kèm checklist, bẫy thường gặp và ví dụ code để bạn có thể áp dụng ngay vào dự án.&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-retry--backoff&#34;&gt;1) Retry &amp;amp; Backoff&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Exponential backoff + jitter (random) để tránh đồng bộ giao động.&lt;/li&gt;&#xA;&lt;li&gt;Phân loại lỗi: &lt;em&gt;retryable&lt;/em&gt; (timeout, 5xx) vs &lt;em&gt;non-retryable&lt;/em&gt; (4xx).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2-circuit-breaker&#34;&gt;2) Circuit Breaker&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Trạng thái: &lt;strong&gt;Closed → Open → Half-Open&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Mở mạch khi tỉ lệ lỗi vượt ngưỡng; thử lại nhỏ giọt ở Half-Open.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;3-idempotency&#34;&gt;3) Idempotency&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Đảm bảo request có thể lặp lại an toàn (idempotency key).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;best-practices-nhanh&#34;&gt;Best-practices nhanh&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ghi log có cấu trúc (JSON) + traceId.&lt;/li&gt;&#xA;&lt;li&gt;Timeout hợp lý cho connect/read/write; tổng timeout (deadline) khi cần.&lt;/li&gt;&#xA;&lt;li&gt;Chuẩn hoá lỗi cho client; đừng lộ stacktrace ra ngoài.&lt;/li&gt;&#xA;&lt;li&gt;Viết kiểm thử với trường hợp &lt;strong&gt;lỗi&lt;/strong&gt; (timeout, 429, 5xx), không chỉ thành công.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;checklist-áp-dụng&#34;&gt;Checklist áp dụng&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Thiết kế protocol hoặc schema API rõ ràng.&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Thêm retry/backoff có điều kiện.&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Quan sát (metrics/log/trace) đầy đủ.&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Tài liệu hoá ví dụ request/response (hoặc mock contract).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;kết-luận&#34;&gt;Kết luận&lt;/h2&gt;&#xA;&lt;p&gt;Những nguyên tắc ở trên đủ để bạn triển khai và mở rộng trong bối cảnh dự án thực tế. Hãy clone lại ví dụ, chạy thử, thêm log và đo đạc; mọi tối ưu đều bắt đầu từ quan sát.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
