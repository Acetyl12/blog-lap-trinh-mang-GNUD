<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Concurrency on Blog Lập Trình Mạng</title>
    <link>http://localhost:1313/tags/concurrency/</link>
    <description>Recent content in Concurrency on Blog Lập Trình Mạng</description>
    <generator>Hugo</generator>
    <language>vi</language>
    <lastBuildDate>Sun, 19 Oct 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/concurrency/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java Concurrency cho ứng dụng mạng: ThreadPool, Backpressure và Metrics</title>
      <link>http://localhost:1313/blog/java-concurrency-ung-dung-mang-threadpool-backpressure-metrics/</link>
      <pubDate>Sun, 19 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/java-concurrency-ung-dung-mang-threadpool-backpressure-metrics/</guid>
      <description>&lt;p&gt;&#xD;&#xA;&lt;figure class=&#34;my-6&#34;&gt;&#xD;&#xA;  &lt;img&#xD;&#xA;    src=&#34;http://localhost:1313/images/posts/java-concurrency-ung-dung-mang-threadpool-backpressure-metrics.svg&#34;&#xD;&#xA;    alt=&#34;minh họa&#34;&#xD;&#xA;    loading=&#34;lazy&#34;&#xD;&#xA;    class=&#34;mx-auto block &#34;&gt;&#xD;&#xA;  &#xD;&#xA;&lt;/figure&gt;&lt;/p&gt;&#xA;&lt;p&gt;Lựa chọn mô hình xử lý đồng thời, thiết kế hàng đợi, chống quá tải và đo đạc độ trễ thông qua metrics.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Từ khoá:&lt;/strong&gt; Java, Concurrency, ThreadPool.&lt;br&gt;&#xA;Trong bài viết này, mình đi theo hướng &lt;em&gt;thực chiến&lt;/em&gt;: giải thích ngắn gọn, kèm checklist, bẫy thường gặp và ví dụ code để bạn có thể áp dụng ngay vào dự án.&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-mô-hình-đồng-thời&#34;&gt;1) Mô hình đồng thời&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Thread-per-connection&lt;/strong&gt;: dễ, nhưng tốn tài nguyên.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;ThreadPool + Queue&lt;/strong&gt;: cân bằng, giới hạn tải.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;NIO/Reactive&lt;/strong&gt;: hiệu quả cho IO-bound.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2-backpressure--hàng-đợi&#34;&gt;2) Backpressure &amp;amp; hàng đợi&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Giới hạn độ dài queue; từ chối sớm khi quá tải.&lt;/li&gt;&#xA;&lt;li&gt;Ưu tiên tác vụ quan trọng.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;3-metrics&#34;&gt;3) Metrics&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Đo độ trễ p95/p99, số lượng request đang xử lý, tỷ lệ lỗi.&lt;/li&gt;&#xA;&lt;li&gt;Xuất Prometheus/Grafana để theo dõi.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;best-practices-nhanh&#34;&gt;Best-practices nhanh&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ghi log có cấu trúc (JSON) + traceId.&lt;/li&gt;&#xA;&lt;li&gt;Timeout hợp lý cho connect/read/write; tổng timeout (deadline) khi cần.&lt;/li&gt;&#xA;&lt;li&gt;Chuẩn hoá lỗi cho client; đừng lộ stacktrace ra ngoài.&lt;/li&gt;&#xA;&lt;li&gt;Viết kiểm thử với trường hợp &lt;strong&gt;lỗi&lt;/strong&gt; (timeout, 429, 5xx), không chỉ thành công.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;checklist-áp-dụng&#34;&gt;Checklist áp dụng&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Thiết kế protocol hoặc schema API rõ ràng.&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Thêm retry/backoff có điều kiện.&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Quan sát (metrics/log/trace) đầy đủ.&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Tài liệu hoá ví dụ request/response (hoặc mock contract).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;kết-luận&#34;&gt;Kết luận&lt;/h2&gt;&#xA;&lt;p&gt;Những nguyên tắc ở trên đủ để bạn triển khai và mở rộng trong bối cảnh dự án thực tế. Hãy clone lại ví dụ, chạy thử, thêm log và đo đạc; mọi tối ưu đều bắt đầu từ quan sát.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java NIO &amp; Selector: Xử lý hàng nghìn kết nối trên một thread</title>
      <link>http://localhost:1313/blog/java-nio-selector-hang-nghin-ket-noi/</link>
      <pubDate>Sun, 19 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/java-nio-selector-hang-nghin-ket-noi/</guid>
      <description>&lt;p&gt;&#xD;&#xA;&lt;figure class=&#34;my-6&#34;&gt;&#xD;&#xA;  &lt;img&#xD;&#xA;    src=&#34;http://localhost:1313/images/posts/java-nio-selector-hang-nghin-ket-noi.svg&#34;&#xD;&#xA;    alt=&#34;minh họa&#34;&#xD;&#xA;    loading=&#34;lazy&#34;&#xD;&#xA;    class=&#34;mx-auto block &#34;&gt;&#xD;&#xA;  &#xD;&#xA;&lt;/figure&gt;&lt;/p&gt;&#xA;&lt;p&gt;Kiến trúc non-blocking với Channel/Selector, mô hình state machine cho mỗi kết nối và tối ưu buffer.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Từ khoá:&lt;/strong&gt; Java, NIO, Selector, Concurrency.&lt;br&gt;&#xA;Trong bài viết này, mình đi theo hướng &lt;em&gt;thực chiến&lt;/em&gt;: giải thích ngắn gọn, kèm checklist, bẫy thường gặp và ví dụ code để bạn có thể áp dụng ngay vào dự án.&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-vì-sao-nio&#34;&gt;1) Vì sao NIO?&lt;/h2&gt;&#xA;&lt;p&gt;Với mô hình “mỗi kết nối một thread”, chi phí context-switch + bộ nhớ tăng mạnh khi có hàng nghìn kết nối. &lt;strong&gt;NIO (non-blocking I/O)&lt;/strong&gt; dùng &lt;code&gt;Selector&lt;/code&gt; để theo dõi nhiều kênh (Channel) trên &lt;strong&gt;ít thread&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Concurrency trong ứng dụng mạng Java</title>
      <link>http://localhost:1313/blog/java-concurrency-cho-ung-dung-mang/</link>
      <pubDate>Thu, 09 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/java-concurrency-cho-ung-dung-mang/</guid>
      <description>&lt;p&gt;3 mô hình phổ biến:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Thread-per-connection&lt;/strong&gt; (dễ nhất, tốn tài nguyên),&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;ThreadPool + Queue&lt;/strong&gt; (cân bằng hơn),&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;NIO/Reactive&lt;/strong&gt; (hiệu năng cao).&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Gợi ý: dùng &lt;code&gt;ExecutorService&lt;/code&gt;, giới hạn pool, đo độ trễ/tải, và quản lý backpressure (hàng đợi). Với IO-bound, ưu tiên NIO/Reactor/Vert.x/Spring WebFlux.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java NIO: Selector &amp; Channel cho kết nối đồng thời</title>
      <link>http://localhost:1313/blog/java-nio-selector-va-channel/</link>
      <pubDate>Thu, 09 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/java-nio-selector-va-channel/</guid>
      <description>&lt;p&gt;&lt;code&gt;java.nio&lt;/code&gt; hỗ trợ &lt;strong&gt;non-blocking I/O&lt;/strong&gt; với &lt;code&gt;Selector&lt;/code&gt; + &lt;code&gt;Channel&lt;/code&gt;, xử lý nhiều socket trên 1 thread.&lt;br&gt;&#xA;Lợi ích: tiết kiệm tài nguyên hơn so với mỗi kết nối một thread.&lt;br&gt;&#xA;Ý tưởng chính:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;ServerSocketChannel&lt;/code&gt; non-blocking + &lt;code&gt;Selector&lt;/code&gt; theo dõi events &lt;code&gt;OP_ACCEPT/OP_READ/OP_WRITE&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Bộ đệm &lt;code&gt;ByteBuffer&lt;/code&gt; tái sử dụng để giảm GC.&lt;/li&gt;&#xA;&lt;li&gt;Thiết kế &lt;strong&gt;state machine&lt;/strong&gt; cho từng connection (đọc header → đọc body → xử lý → ghi).&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
