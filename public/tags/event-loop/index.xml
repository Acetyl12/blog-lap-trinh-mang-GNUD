<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Event Loop on Blog Lập Trình Mạng</title>
    <link>http://localhost:1313/tags/event-loop/</link>
    <description>Recent content in Event Loop on Blog Lập Trình Mạng</description>
    <generator>Hugo</generator>
    <language>vi</language>
    <lastBuildDate>Sun, 19 Oct 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/event-loop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JavaScript Event Loop: hiểu đúng async/await, microtask &amp; network I/O</title>
      <link>http://localhost:1313/blog/javascript-event-loop-async-await-microtask-network-io/</link>
      <pubDate>Sun, 19 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/javascript-event-loop-async-await-microtask-network-io/</guid>
      <description>&lt;p&gt;&#xD;&#xA;&lt;figure class=&#34;my-6&#34;&gt;&#xD;&#xA;  &lt;img&#xD;&#xA;    src=&#34;http://localhost:1313/images/posts/javascript-event-loop-async-await-microtask-network-io.svg&#34;&#xD;&#xA;    alt=&#34;minh họa&#34;&#xD;&#xA;    loading=&#34;lazy&#34;&#xD;&#xA;    class=&#34;mx-auto block &#34;&gt;&#xD;&#xA;  &#xD;&#xA;&lt;/figure&gt;&lt;/p&gt;&#xA;&lt;p&gt;Giải thích cơ chế Event Loop, macro/microtask, cách viết async/await đúng và tránh nghẽn UI.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Từ khoá:&lt;/strong&gt; JavaScript, Event Loop, Async.&lt;br&gt;&#xA;Trong bài viết này, mình đi theo hướng &lt;em&gt;thực chiến&lt;/em&gt;: giải thích ngắn gọn, kèm checklist, bẫy thường gặp và ví dụ code để bạn có thể áp dụng ngay vào dự án.&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-macro-vs-microtask&#34;&gt;1) Macro vs Microtask&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Macro&lt;/strong&gt;: setTimeout, setInterval, I/O.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Micro&lt;/strong&gt;: Promise callbacks, queue ưu tiên cao hơn.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2-asyncawait-đúng-cách&#34;&gt;2) async/await đúng cách&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Tránh &lt;code&gt;await&lt;/code&gt; tuần tự trong vòng lặp nếu có thể &lt;code&gt;Promise.all&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Bọc lỗi bằng try/catch hoặc &lt;code&gt;.catch()&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;load&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; [&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; Promise.&lt;span style=&#34;color:#a6e22e&#34;&gt;all&lt;/span&gt;([&lt;span style=&#34;color:#a6e22e&#34;&gt;fetch&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/users&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/posts&amp;#39;&lt;/span&gt;)]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;best-practices-nhanh&#34;&gt;Best-practices nhanh&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ghi log có cấu trúc (JSON) + traceId.&lt;/li&gt;&#xA;&lt;li&gt;Timeout hợp lý cho connect/read/write; tổng timeout (deadline) khi cần.&lt;/li&gt;&#xA;&lt;li&gt;Chuẩn hoá lỗi cho client; đừng lộ stacktrace ra ngoài.&lt;/li&gt;&#xA;&lt;li&gt;Viết kiểm thử với trường hợp &lt;strong&gt;lỗi&lt;/strong&gt; (timeout, 429, 5xx), không chỉ thành công.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;checklist-áp-dụng&#34;&gt;Checklist áp dụng&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Thiết kế protocol hoặc schema API rõ ràng.&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Thêm retry/backoff có điều kiện.&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Quan sát (metrics/log/trace) đầy đủ.&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Tài liệu hoá ví dụ request/response (hoặc mock contract).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;kết-luận&#34;&gt;Kết luận&lt;/h2&gt;&#xA;&lt;p&gt;Những nguyên tắc ở trên đủ để bạn triển khai và mở rộng trong bối cảnh dự án thực tế. Hãy clone lại ví dụ, chạy thử, thêm log và đo đạc; mọi tối ưu đều bắt đầu từ quan sát.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
