<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Blog Lập Trình Mạng</title>
    <link>http://localhost:1313/tags/java/</link>
    <description>Recent content in Java on Blog Lập Trình Mạng</description>
    <generator>Hugo</generator>
    <language>vi</language>
    <lastBuildDate>Sun, 19 Oct 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java 11&#43; HttpClient: gọi API sync/async, timeout và retry</title>
      <link>http://localhost:1313/blog/java-httpclient-11-sync-async-timeout-retry/</link>
      <pubDate>Sun, 19 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/java-httpclient-11-sync-async-timeout-retry/</guid>
      <description>&lt;p&gt;&#xD;&#xA;&lt;figure class=&#34;my-6&#34;&gt;&#xD;&#xA;  &lt;img&#xD;&#xA;    src=&#34;http://localhost:1313/images/posts/java-httpclient-11-sync-async-timeout-retry.svg&#34;&#xD;&#xA;    alt=&#34;minh họa&#34;&#xD;&#xA;    loading=&#34;lazy&#34;&#xD;&#xA;    class=&#34;mx-auto block &#34;&gt;&#xD;&#xA;  &#xD;&#xA;&lt;/figure&gt;&lt;/p&gt;&#xA;&lt;p&gt;Sử dụng HttpClient để gọi REST một cách hiện đại: cấu hình timeout, redirect, async và chiến lược retry.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Từ khoá:&lt;/strong&gt; Java, HTTP, API.&lt;br&gt;&#xA;Trong bài viết này, mình đi theo hướng &lt;em&gt;thực chiến&lt;/em&gt;: giải thích ngắn gọn, kèm checklist, bẫy thường gặp và ví dụ code để bạn có thể áp dụng ngay vào dự án.&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-thiết-lập-cơ-bản&#34;&gt;1) Thiết lập cơ bản&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;HttpClient&lt;/code&gt; (Java 11+) hỗ trợ sync/async, HTTP/2, redirect, timeout.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java Concurrency cho ứng dụng mạng: ThreadPool, Backpressure và Metrics</title>
      <link>http://localhost:1313/blog/java-concurrency-ung-dung-mang-threadpool-backpressure-metrics/</link>
      <pubDate>Sun, 19 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/java-concurrency-ung-dung-mang-threadpool-backpressure-metrics/</guid>
      <description>&lt;p&gt;&#xD;&#xA;&lt;figure class=&#34;my-6&#34;&gt;&#xD;&#xA;  &lt;img&#xD;&#xA;    src=&#34;http://localhost:1313/images/posts/java-concurrency-ung-dung-mang-threadpool-backpressure-metrics.svg&#34;&#xD;&#xA;    alt=&#34;minh họa&#34;&#xD;&#xA;    loading=&#34;lazy&#34;&#xD;&#xA;    class=&#34;mx-auto block &#34;&gt;&#xD;&#xA;  &#xD;&#xA;&lt;/figure&gt;&lt;/p&gt;&#xA;&lt;p&gt;Lựa chọn mô hình xử lý đồng thời, thiết kế hàng đợi, chống quá tải và đo đạc độ trễ thông qua metrics.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Từ khoá:&lt;/strong&gt; Java, Concurrency, ThreadPool.&lt;br&gt;&#xA;Trong bài viết này, mình đi theo hướng &lt;em&gt;thực chiến&lt;/em&gt;: giải thích ngắn gọn, kèm checklist, bẫy thường gặp và ví dụ code để bạn có thể áp dụng ngay vào dự án.&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-mô-hình-đồng-thời&#34;&gt;1) Mô hình đồng thời&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Thread-per-connection&lt;/strong&gt;: dễ, nhưng tốn tài nguyên.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;ThreadPool + Queue&lt;/strong&gt;: cân bằng, giới hạn tải.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;NIO/Reactive&lt;/strong&gt;: hiệu quả cho IO-bound.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2-backpressure--hàng-đợi&#34;&gt;2) Backpressure &amp;amp; hàng đợi&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Giới hạn độ dài queue; từ chối sớm khi quá tải.&lt;/li&gt;&#xA;&lt;li&gt;Ưu tiên tác vụ quan trọng.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;3-metrics&#34;&gt;3) Metrics&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Đo độ trễ p95/p99, số lượng request đang xử lý, tỷ lệ lỗi.&lt;/li&gt;&#xA;&lt;li&gt;Xuất Prometheus/Grafana để theo dõi.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;best-practices-nhanh&#34;&gt;Best-practices nhanh&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ghi log có cấu trúc (JSON) + traceId.&lt;/li&gt;&#xA;&lt;li&gt;Timeout hợp lý cho connect/read/write; tổng timeout (deadline) khi cần.&lt;/li&gt;&#xA;&lt;li&gt;Chuẩn hoá lỗi cho client; đừng lộ stacktrace ra ngoài.&lt;/li&gt;&#xA;&lt;li&gt;Viết kiểm thử với trường hợp &lt;strong&gt;lỗi&lt;/strong&gt; (timeout, 429, 5xx), không chỉ thành công.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;checklist-áp-dụng&#34;&gt;Checklist áp dụng&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Thiết kế protocol hoặc schema API rõ ràng.&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Thêm retry/backoff có điều kiện.&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Quan sát (metrics/log/trace) đầy đủ.&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Tài liệu hoá ví dụ request/response (hoặc mock contract).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;kết-luận&#34;&gt;Kết luận&lt;/h2&gt;&#xA;&lt;p&gt;Những nguyên tắc ở trên đủ để bạn triển khai và mở rộng trong bối cảnh dự án thực tế. Hãy clone lại ví dụ, chạy thử, thêm log và đo đạc; mọi tối ưu đều bắt đầu từ quan sát.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java NIO &amp; Selector: Xử lý hàng nghìn kết nối trên một thread</title>
      <link>http://localhost:1313/blog/java-nio-selector-hang-nghin-ket-noi/</link>
      <pubDate>Sun, 19 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/java-nio-selector-hang-nghin-ket-noi/</guid>
      <description>&lt;p&gt;&#xD;&#xA;&lt;figure class=&#34;my-6&#34;&gt;&#xD;&#xA;  &lt;img&#xD;&#xA;    src=&#34;http://localhost:1313/images/posts/java-nio-selector-hang-nghin-ket-noi.svg&#34;&#xD;&#xA;    alt=&#34;minh họa&#34;&#xD;&#xA;    loading=&#34;lazy&#34;&#xD;&#xA;    class=&#34;mx-auto block &#34;&gt;&#xD;&#xA;  &#xD;&#xA;&lt;/figure&gt;&lt;/p&gt;&#xA;&lt;p&gt;Kiến trúc non-blocking với Channel/Selector, mô hình state machine cho mỗi kết nối và tối ưu buffer.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Từ khoá:&lt;/strong&gt; Java, NIO, Selector, Concurrency.&lt;br&gt;&#xA;Trong bài viết này, mình đi theo hướng &lt;em&gt;thực chiến&lt;/em&gt;: giải thích ngắn gọn, kèm checklist, bẫy thường gặp và ví dụ code để bạn có thể áp dụng ngay vào dự án.&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-vì-sao-nio&#34;&gt;1) Vì sao NIO?&lt;/h2&gt;&#xA;&lt;p&gt;Với mô hình “mỗi kết nối một thread”, chi phí context-switch + bộ nhớ tăng mạnh khi có hàng nghìn kết nối. &lt;strong&gt;NIO (non-blocking I/O)&lt;/strong&gt; dùng &lt;code&gt;Selector&lt;/code&gt; để theo dõi nhiều kênh (Channel) trên &lt;strong&gt;ít thread&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java Socket TCP cơ bản: Client/Server và giao thức thông điệp đơn giản</title>
      <link>http://localhost:1313/blog/java-socket-tcp-co-ban/</link>
      <pubDate>Sun, 19 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/java-socket-tcp-co-ban/</guid>
      <description>&lt;p&gt;&#xD;&#xA;&lt;figure class=&#34;my-6&#34;&gt;&#xD;&#xA;  &lt;img&#xD;&#xA;    src=&#34;http://localhost:1313/images/posts/java-socket-tcp-co-ban.svg&#34;&#xD;&#xA;    alt=&#34;minh họa&#34;&#xD;&#xA;    loading=&#34;lazy&#34;&#xD;&#xA;    class=&#34;mx-auto block &#34;&gt;&#xD;&#xA;  &#xD;&#xA;&lt;/figure&gt;&lt;/p&gt;&#xA;&lt;p&gt;Bắt đầu với lập trình mạng bằng Java: tạo TCP server/client, quy ước thông điệp, xử lý đóng kết nối an toàn.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Từ khoá:&lt;/strong&gt; Java, Networking, TCP, Socket.&lt;br&gt;&#xA;Trong bài viết này, mình đi theo hướng &lt;em&gt;thực chiến&lt;/em&gt;: giải thích ngắn gọn, kèm checklist, bẫy thường gặp và ví dụ code để bạn có thể áp dụng ngay vào dự án.&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-mô-hình-clientserver--giao-thức&#34;&gt;1) Mô hình Client/Server &amp;amp; giao thức&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Server&lt;/strong&gt; mở port (ví dụ 8080), chấp nhận kết nối mới và tạo luồng đọc/ghi cho từng client.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Client&lt;/strong&gt; kết nối &lt;code&gt;host:port&lt;/code&gt;, gửi thông điệp theo một &lt;strong&gt;quy ước&lt;/strong&gt; (protocol) đơn giản để 2 bên hiểu nhau.&lt;/li&gt;&#xA;&lt;li&gt;Chọn &lt;strong&gt;delimiter&lt;/strong&gt; (&lt;code&gt;\n&lt;/code&gt;) hoặc &lt;strong&gt;length-prefix&lt;/strong&gt; (gửi trước độ dài) để tránh dính/chia gói.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2-ví-dụ-server-tối-giản-java&#34;&gt;2) Ví dụ server tối giản (Java)&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.io.*;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.net.*;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EchoServer&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args) &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; (ServerSocket ss &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ServerSocket(8080)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Listening on 8080&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Socket s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ss.&lt;span style=&#34;color:#a6e22e&#34;&gt;accept&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Thread(() &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; handle(s)).&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handle&lt;/span&gt;(Socket s) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; (s;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      BufferedReader in &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BufferedReader(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; InputStreamReader(s.&lt;span style=&#34;color:#a6e22e&#34;&gt;getInputStream&lt;/span&gt;()));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      PrintWriter out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PrintWriter(s.&lt;span style=&#34;color:#a6e22e&#34;&gt;getOutputStream&lt;/span&gt;(), &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      String line;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ((line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; in.&lt;span style=&#34;color:#a6e22e&#34;&gt;readLine&lt;/span&gt;()) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;quit&amp;#34;&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;equalsIgnoreCase&lt;/span&gt;(line)) &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        out.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;echo:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; line);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (IOException e) { e.&lt;span style=&#34;color:#a6e22e&#34;&gt;printStackTrace&lt;/span&gt;(); }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3-client&#34;&gt;3) Client&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.io.*;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.net.*;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EchoClient&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args) &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; (Socket s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Socket(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;127.0.0.1&amp;#34;&lt;/span&gt;, 8080);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         BufferedReader in &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BufferedReader(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; InputStreamReader(s.&lt;span style=&#34;color:#a6e22e&#34;&gt;getInputStream&lt;/span&gt;()));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         PrintWriter out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PrintWriter(s.&lt;span style=&#34;color:#a6e22e&#34;&gt;getOutputStream&lt;/span&gt;(), &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      out.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(in.&lt;span style=&#34;color:#a6e22e&#34;&gt;readLine&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4-checklist-an-toàn&#34;&gt;4) Checklist an toàn&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Timeout đọc/ghi; đóng tài nguyên với &lt;code&gt;try-with-resources&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Ghi log có &lt;strong&gt;request-id&lt;/strong&gt; để trace.&lt;/li&gt;&#xA;&lt;li&gt;Định nghĩa rõ &lt;strong&gt;protocol&lt;/strong&gt; từ đầu; có phiên bản (v1, v2) để nâng cấp.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;best-practices-nhanh&#34;&gt;Best-practices nhanh&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ghi log có cấu trúc (JSON) + traceId.&lt;/li&gt;&#xA;&lt;li&gt;Timeout hợp lý cho connect/read/write; tổng timeout (deadline) khi cần.&lt;/li&gt;&#xA;&lt;li&gt;Chuẩn hoá lỗi cho client; đừng lộ stacktrace ra ngoài.&lt;/li&gt;&#xA;&lt;li&gt;Viết kiểm thử với trường hợp &lt;strong&gt;lỗi&lt;/strong&gt; (timeout, 429, 5xx), không chỉ thành công.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;checklist-áp-dụng&#34;&gt;Checklist áp dụng&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Thiết kế protocol hoặc schema API rõ ràng.&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Thêm retry/backoff có điều kiện.&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Quan sát (metrics/log/trace) đầy đủ.&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Tài liệu hoá ví dụ request/response (hoặc mock contract).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;kết-luận&#34;&gt;Kết luận&lt;/h2&gt;&#xA;&lt;p&gt;Những nguyên tắc ở trên đủ để bạn triển khai và mở rộng trong bối cảnh dự án thực tế. Hãy clone lại ví dụ, chạy thử, thêm log và đo đạc; mọi tối ưu đều bắt đầu từ quan sát.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kiểm thử code mạng Java với JUnit &amp; WireMock</title>
      <link>http://localhost:1313/blog/kiem-thu-network-java-junit-wiremock/</link>
      <pubDate>Sun, 19 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/kiem-thu-network-java-junit-wiremock/</guid>
      <description>&lt;p&gt;&#xD;&#xA;&lt;figure class=&#34;my-6&#34;&gt;&#xD;&#xA;  &lt;img&#xD;&#xA;    src=&#34;http://localhost:1313/images/posts/kiem-thu-network-java-junit-wiremock.svg&#34;&#xD;&#xA;    alt=&#34;minh họa&#34;&#xD;&#xA;    loading=&#34;lazy&#34;&#xD;&#xA;    class=&#34;mx-auto block &#34;&gt;&#xD;&#xA;  &#xD;&#xA;&lt;/figure&gt;&lt;/p&gt;&#xA;&lt;p&gt;Mock server HTTP, giả lập tình huống lỗi, timeouts, và viết test đáng tin cậy cho logic mạng.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Từ khoá:&lt;/strong&gt; Java, Testing, WireMock, JUnit.&lt;br&gt;&#xA;Trong bài viết này, mình đi theo hướng &lt;em&gt;thực chiến&lt;/em&gt;: giải thích ngắn gọn, kèm checklist, bẫy thường gặp và ví dụ code để bạn có thể áp dụng ngay vào dự án.&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-vì-sao-cần-mock&#34;&gt;1) Vì sao cần mock?&lt;/h2&gt;&#xA;&lt;p&gt;Kiểm thử code mạng &lt;strong&gt;không phụ thuộc&lt;/strong&gt; hệ thống bên ngoài. &lt;code&gt;WireMock&lt;/code&gt; giúp giả lập API với scenario, delay, lỗi…&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tăng độ bền mạng: Retry, Backoff, Circuit Breaker cho Java &amp; JS</title>
      <link>http://localhost:1313/blog/tang-do-ben-mang-retry-backoff-circuit-breaker-java-js/</link>
      <pubDate>Sun, 19 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/tang-do-ben-mang-retry-backoff-circuit-breaker-java-js/</guid>
      <description>&lt;p&gt;&#xD;&#xA;&lt;figure class=&#34;my-6&#34;&gt;&#xD;&#xA;  &lt;img&#xD;&#xA;    src=&#34;http://localhost:1313/images/posts/tang-do-ben-mang-retry-backoff-circuit-breaker-java-js.svg&#34;&#xD;&#xA;    alt=&#34;minh họa&#34;&#xD;&#xA;    loading=&#34;lazy&#34;&#xD;&#xA;    class=&#34;mx-auto block &#34;&gt;&#xD;&#xA;  &#xD;&#xA;&lt;/figure&gt;&lt;/p&gt;&#xA;&lt;p&gt;Mẫu thiết kế chống lỗi mạng: exponential backoff, jitter, circuit breaker và idempotency.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Từ khoá:&lt;/strong&gt; Resilience, Java, JavaScript.&lt;br&gt;&#xA;Trong bài viết này, mình đi theo hướng &lt;em&gt;thực chiến&lt;/em&gt;: giải thích ngắn gọn, kèm checklist, bẫy thường gặp và ví dụ code để bạn có thể áp dụng ngay vào dự án.&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-retry--backoff&#34;&gt;1) Retry &amp;amp; Backoff&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Exponential backoff + jitter (random) để tránh đồng bộ giao động.&lt;/li&gt;&#xA;&lt;li&gt;Phân loại lỗi: &lt;em&gt;retryable&lt;/em&gt; (timeout, 5xx) vs &lt;em&gt;non-retryable&lt;/em&gt; (4xx).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2-circuit-breaker&#34;&gt;2) Circuit Breaker&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Trạng thái: &lt;strong&gt;Closed → Open → Half-Open&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Mở mạch khi tỉ lệ lỗi vượt ngưỡng; thử lại nhỏ giọt ở Half-Open.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;3-idempotency&#34;&gt;3) Idempotency&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Đảm bảo request có thể lặp lại an toàn (idempotency key).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;best-practices-nhanh&#34;&gt;Best-practices nhanh&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ghi log có cấu trúc (JSON) + traceId.&lt;/li&gt;&#xA;&lt;li&gt;Timeout hợp lý cho connect/read/write; tổng timeout (deadline) khi cần.&lt;/li&gt;&#xA;&lt;li&gt;Chuẩn hoá lỗi cho client; đừng lộ stacktrace ra ngoài.&lt;/li&gt;&#xA;&lt;li&gt;Viết kiểm thử với trường hợp &lt;strong&gt;lỗi&lt;/strong&gt; (timeout, 429, 5xx), không chỉ thành công.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;checklist-áp-dụng&#34;&gt;Checklist áp dụng&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Thiết kế protocol hoặc schema API rõ ràng.&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Thêm retry/backoff có điều kiện.&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Quan sát (metrics/log/trace) đầy đủ.&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Tài liệu hoá ví dụ request/response (hoặc mock contract).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;kết-luận&#34;&gt;Kết luận&lt;/h2&gt;&#xA;&lt;p&gt;Những nguyên tắc ở trên đủ để bạn triển khai và mở rộng trong bối cảnh dự án thực tế. Hãy clone lại ví dụ, chạy thử, thêm log và đo đạc; mọi tối ưu đều bắt đầu từ quan sát.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Concurrency trong ứng dụng mạng Java</title>
      <link>http://localhost:1313/blog/java-concurrency-cho-ung-dung-mang/</link>
      <pubDate>Thu, 09 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/java-concurrency-cho-ung-dung-mang/</guid>
      <description>&lt;p&gt;3 mô hình phổ biến:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Thread-per-connection&lt;/strong&gt; (dễ nhất, tốn tài nguyên),&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;ThreadPool + Queue&lt;/strong&gt; (cân bằng hơn),&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;NIO/Reactive&lt;/strong&gt; (hiệu năng cao).&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Gợi ý: dùng &lt;code&gt;ExecutorService&lt;/code&gt;, giới hạn pool, đo độ trễ/tải, và quản lý backpressure (hàng đợi). Với IO-bound, ưu tiên NIO/Reactor/Vert.x/Spring WebFlux.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java 11&#43;: HttpClient hiện đại (sync/async)</title>
      <link>http://localhost:1313/blog/java-http-client-modern-11-plus/</link>
      <pubDate>Thu, 09 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/java-http-client-modern-11-plus/</guid>
      <description>&lt;p&gt;&lt;code&gt;java.net.http.HttpClient&lt;/code&gt; (Java 11+) đơn giản hoá gọi REST:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Tạo &lt;code&gt;HttpClient&lt;/code&gt;, &lt;code&gt;HttpRequest&lt;/code&gt;, sau đó &lt;code&gt;send()&lt;/code&gt; (sync) hoặc &lt;code&gt;sendAsync()&lt;/code&gt; (CompletableFuture).&lt;/li&gt;&#xA;&lt;li&gt;Dễ set timeout, redirect, header; parse JSON với Jackson/Gson.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Ví dụ: GET/POST, retry (tự viết), log request/response, và best-practices (timeout, circuit-breaker bên ngoài như Resilience4j).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java cơ bản: Giới thiệu Lập trình Mạng &amp; Socket</title>
      <link>http://localhost:1313/blog/java-co-ban-gioi-thieu-mang-socket/</link>
      <pubDate>Thu, 09 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/java-co-ban-gioi-thieu-mang-socket/</guid>
      <description>&lt;p&gt;Bài viết mở đầu chuỗi Java Network: tổng quan TCP/UDP, địa chỉ IP/Port, và mô hình Client/Server.&lt;br&gt;&#xA;&lt;strong&gt;Socket&lt;/strong&gt; là điểm đầu cuối của kết nối mạng. Với Java, gói &lt;code&gt;java.net&lt;/code&gt; cung cấp &lt;code&gt;Socket&lt;/code&gt;, &lt;code&gt;ServerSocket&lt;/code&gt; (TCP) và &lt;code&gt;DatagramSocket&lt;/code&gt; (UDP).&lt;br&gt;&#xA;&lt;strong&gt;Khi nào dùng TCP?&lt;/strong&gt; Khi cần tin cậy, có thứ tự. &lt;strong&gt;Khi nào dùng UDP?&lt;/strong&gt; Khi cần tốc độ, chấp nhận mất mát (streaming, game).&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Mẹo học: phác thảo luồng dữ liệu từ client → server và log mọi trạng thái để dễ debug.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java NIO: Selector &amp; Channel cho kết nối đồng thời</title>
      <link>http://localhost:1313/blog/java-nio-selector-va-channel/</link>
      <pubDate>Thu, 09 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/java-nio-selector-va-channel/</guid>
      <description>&lt;p&gt;&lt;code&gt;java.nio&lt;/code&gt; hỗ trợ &lt;strong&gt;non-blocking I/O&lt;/strong&gt; với &lt;code&gt;Selector&lt;/code&gt; + &lt;code&gt;Channel&lt;/code&gt;, xử lý nhiều socket trên 1 thread.&lt;br&gt;&#xA;Lợi ích: tiết kiệm tài nguyên hơn so với mỗi kết nối một thread.&lt;br&gt;&#xA;Ý tưởng chính:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;ServerSocketChannel&lt;/code&gt; non-blocking + &lt;code&gt;Selector&lt;/code&gt; theo dõi events &lt;code&gt;OP_ACCEPT/OP_READ/OP_WRITE&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Bộ đệm &lt;code&gt;ByteBuffer&lt;/code&gt; tái sử dụng để giảm GC.&lt;/li&gt;&#xA;&lt;li&gt;Thiết kế &lt;strong&gt;state machine&lt;/strong&gt; cho từng connection (đọc header → đọc body → xử lý → ghi).&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Java Socket TCP: Server/Client cơ bản</title>
      <link>http://localhost:1313/blog/java-socket-tcp-server-client-co-ban/</link>
      <pubDate>Thu, 09 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/java-socket-tcp-server-client-co-ban/</guid>
      <description>&lt;p&gt;Ví dụ tối giản:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Server&lt;/strong&gt;: mở &lt;code&gt;ServerSocket&lt;/code&gt;, chấp nhận &lt;code&gt;Socket&lt;/code&gt;, đọc/ghi qua &lt;code&gt;InputStream/OutputStream&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Client&lt;/strong&gt;: tạo &lt;code&gt;Socket(host, port)&lt;/code&gt;, gửi chuỗi, nhận phản hồi.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Các bước an toàn:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Dùng &lt;code&gt;try-with-resources&lt;/code&gt; để đóng tài nguyên.&lt;/li&gt;&#xA;&lt;li&gt;Quy ước &lt;strong&gt;message protocol&lt;/strong&gt; (ví dụ: chuỗi JSON kết thúc bằng &lt;code&gt;\n&lt;/code&gt;).&lt;/li&gt;&#xA;&lt;li&gt;Thử nghiệm bằng &lt;code&gt;telnet&lt;/code&gt;/&lt;code&gt;nc&lt;/code&gt; để kiểm tra server.&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
  </channel>
</rss>
